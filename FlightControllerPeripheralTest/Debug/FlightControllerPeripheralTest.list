
FlightControllerPeripheralTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006e28  08006e28  00016e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ebc  08006ebc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006ebc  08006ebc  00016ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ec4  08006ec4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec8  08006ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001964  200001e4  080070b0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b48  080070b0  00021b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141ab  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002da2  00000000  00000000  000343bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  00037168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  00037e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002158b  00000000  00000000  00038a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d9bf  00000000  00000000  00059f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bac5b  00000000  00000000  0006794a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001225a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003748  00000000  00000000  00122620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e10 	.word	0x08006e10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08006e10 	.word	0x08006e10

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fa51 	bl	8000a2c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f827 	bl	80005dc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f8c5 	bl	800071c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000592:	f000 f88d 	bl	80006b0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000596:	f005 faf3 	bl	8005b80 <MX_USB_DEVICE_Init>


  char txBuf[8];
  uint8_t count = 1;
 800059a:	2301      	movs	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  while (1)
  {

	sprintf(txBuf, "%u\r\n", count);
 800059e:	7bfa      	ldrb	r2, [r7, #15]
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	490d      	ldr	r1, [pc, #52]	; (80005d8 <main+0x58>)
 80005a4:	4618      	mov	r0, r3
 80005a6:	f006 f8e5 	bl	8006774 <siprintf>

	count++;
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]

	if(count > 100) {
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b64      	cmp	r3, #100	; 0x64
 80005b4:	d901      	bls.n	80005ba <main+0x3a>
		count = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	73fb      	strb	r3, [r7, #15]
	}

	CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe07 	bl	80001d0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4611      	mov	r1, r2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fb96 	bl	8005cfc <CDC_Transmit_FS>

	HAL_Delay(100);
 80005d0:	2064      	movs	r0, #100	; 0x64
 80005d2:	f000 fa9d 	bl	8000b10 <HAL_Delay>
	sprintf(txBuf, "%u\r\n", count);
 80005d6:	e7e2      	b.n	800059e <main+0x1e>
 80005d8:	08006e28 	.word	0x08006e28

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f006 f802 	bl	80065f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <SystemClock_Config+0xcc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <SystemClock_Config+0xd0>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000650:	23a8      	movs	r3, #168	; 0xa8
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000658:	2307      	movs	r3, #7
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f001 febf 	bl	80023e4 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800066c:	f000 f8c0 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2105      	movs	r1, #5
 800068e:	4618      	mov	r0, r3
 8000690:	f002 f918 	bl	80028c4 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069a:	f000 f8a9 	bl	80007f0 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_SPI1_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <MX_SPI1_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_SPI1_Init+0x64>)
 80006e4:	2210      	movs	r2, #16
 80006e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_SPI1_Init+0x64>)
 80006fc:	220a      	movs	r2, #10
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_SPI1_Init+0x64>)
 8000702:	f002 faa7 	bl	8002c54 <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800070c:	f000 f870 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000210 	.word	0x20000210
 8000718:	40013000 	.word	0x40013000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <MX_GPIO_Init+0xc8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <MX_GPIO_Init+0xc8>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <MX_GPIO_Init+0xc8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_GPIO_Init+0xc8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <MX_GPIO_Init+0xc8>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_GPIO_Init+0xc8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_GPIO_Init+0xc8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <MX_GPIO_Init+0xc8>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_GPIO_Init+0xc8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078c:	4816      	ldr	r0, [pc, #88]	; (80007e8 <MX_GPIO_Init+0xcc>)
 800078e:	f000 fc8d 	bl	80010ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000798:	4814      	ldr	r0, [pc, #80]	; (80007ec <MX_GPIO_Init+0xd0>)
 800079a:	f000 fc87 	bl	80010ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800079e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	480c      	ldr	r0, [pc, #48]	; (80007e8 <MX_GPIO_Init+0xcc>)
 80007b8:	f000 fade 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BARO_CS_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin;
 80007bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BARO_CS_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_GPIO_Init+0xd0>)
 80007d6:	f000 facf 	bl	8000d78 <HAL_GPIO_Init>

}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020400 	.word	0x40020400
 80007ec:	40020000 	.word	0x40020000

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <Error_Handler+0x6>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_MspInit+0x4c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <HAL_SPI_MspInit+0x84>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d12b      	bne.n	80008c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <HAL_SPI_MspInit+0x88>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <HAL_SPI_MspInit+0x88>)
 8000874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_SPI_MspInit+0x88>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_SPI_MspInit+0x88>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <HAL_SPI_MspInit+0x88>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_SPI_MspInit+0x88>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008a2:	23e0      	movs	r3, #224	; 0xe0
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b2:	2305      	movs	r3, #5
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <HAL_SPI_MspInit+0x8c>)
 80008be:	f000 fa5b 	bl	8000d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40013000 	.word	0x40013000
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000924:	f000 f8d4 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <OTG_FS_IRQHandler+0x10>)
 8000932:	f000 fd24 	bl	800137e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000173c 	.word	0x2000173c

08000940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <_sbrk+0x5c>)
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <_sbrk+0x60>)
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <_sbrk+0x64>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <_sbrk+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	d207      	bcs.n	8000980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000970:	f005 fe06 	bl	8006580 <__errno>
 8000974:	4602      	mov	r2, r0
 8000976:	230c      	movs	r3, #12
 8000978:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800097e:	e009      	b.n	8000994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <_sbrk+0x64>)
 8000990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20020000 	.word	0x20020000
 80009a0:	00000400 	.word	0x00000400
 80009a4:	20000200 	.word	0x20000200
 80009a8:	20001b48 	.word	0x20001b48

080009ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <SystemInit+0x28>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <SystemInit+0x28>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SystemInit+0x28>)
 80009c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009c6:	609a      	str	r2, [r3, #8]
#endif
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009de:	e003      	b.n	80009e8 <LoopCopyDataInit>

080009e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009e6:	3104      	adds	r1, #4

080009e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009f0:	d3f6      	bcc.n	80009e0 <CopyDataInit>
  ldr  r2, =_sbss
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009f4:	e002      	b.n	80009fc <LoopFillZerobss>

080009f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009f8:	f842 3b04 	str.w	r3, [r2], #4

080009fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a00:	d3f9      	bcc.n	80009f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a02:	f7ff ffd3 	bl	80009ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f005 fdc1 	bl	800658c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0a:	f7ff fdb9 	bl	8000580 <main>
  bx  lr    
 8000a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a14:	08006ecc 	.word	0x08006ecc
  ldr  r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a1c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000a20:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000a24:	20001b48 	.word	0x20001b48

08000a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <HAL_Init+0x40>)
 8000a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_Init+0x40>)
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_Init+0x40>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f94d 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 f808 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff feca 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x54>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x58>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f965 	bl	8000d5e <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aac:	f000 f92d 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x5c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000268 	.word	0x20000268

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000268 	.word	0x20000268

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_Delay+0x40>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffde 	bl	8000af8 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8f7      	bhi.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000008 	.word	0x20000008

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd4:	f7ff ff8e 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff29 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff3e 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff8e 	bl	8000c48 <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff31 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffa2 	bl	8000cb0 <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e16b      	b.n	800106c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 815a 	bne.w	8001066 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d00b      	beq.n	8000dd2 <HAL_GPIO_Init+0x5a>
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d007      	beq.n	8000dd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc6:	2b11      	cmp	r3, #17
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b12      	cmp	r3, #18
 8000dd0:	d130      	bne.n	8000e34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0xfc>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80b4 	beq.w	8001066 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b5f      	ldr	r3, [pc, #380]	; (8001080 <HAL_GPIO_Init+0x308>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a5e      	ldr	r2, [pc, #376]	; (8001080 <HAL_GPIO_Init+0x308>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b5c      	ldr	r3, [pc, #368]	; (8001080 <HAL_GPIO_Init+0x308>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1a:	4a5a      	ldr	r2, [pc, #360]	; (8001084 <HAL_GPIO_Init+0x30c>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a51      	ldr	r2, [pc, #324]	; (8001088 <HAL_GPIO_Init+0x310>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d02b      	beq.n	8000f9e <HAL_GPIO_Init+0x226>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a50      	ldr	r2, [pc, #320]	; (800108c <HAL_GPIO_Init+0x314>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d025      	beq.n	8000f9a <HAL_GPIO_Init+0x222>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <HAL_GPIO_Init+0x318>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d01f      	beq.n	8000f96 <HAL_GPIO_Init+0x21e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x31c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x21a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x320>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x216>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x324>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x212>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x328>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x20e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x32c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x20a>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e00e      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f82:	2308      	movs	r3, #8
 8000f84:	e00c      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e00a      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e008      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	f002 0203 	and.w	r2, r2, #3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb0:	4934      	ldr	r1, [pc, #208]	; (8001084 <HAL_GPIO_Init+0x30c>)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe2:	4a31      	ldr	r2, [pc, #196]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100c:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <HAL_GPIO_Init+0x330>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <HAL_GPIO_Init+0x330>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001060:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	f67f ae90 	bls.w	8000d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001074:	bf00      	nop
 8001076:	3724      	adds	r7, #36	; 0x24
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40023800 	.word	0x40023800
 8001084:	40013800 	.word	0x40013800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	40020c00 	.word	0x40020c00
 8001098:	40021000 	.word	0x40021000
 800109c:	40021400 	.word	0x40021400
 80010a0:	40021800 	.word	0x40021800
 80010a4:	40021c00 	.word	0x40021c00
 80010a8:	40013c00 	.word	0x40013c00

080010ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010bc:	787b      	ldrb	r3, [r7, #1]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c8:	e003      	b.n	80010d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	041a      	lsls	r2, r3, #16
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	619a      	str	r2, [r3, #24]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e0:	b08f      	sub	sp, #60	; 0x3c
 80010e2:	af0a      	add	r7, sp, #40	; 0x28
 80010e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e10f      	b.n	8001310 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d106      	bne.n	8001110 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f004 ff3c 	bl	8005f88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2203      	movs	r2, #3
 8001114:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800111c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f001 ff09 	bl	8002f46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	687e      	ldr	r6, [r7, #4]
 800113c:	466d      	mov	r5, sp
 800113e:	f106 0410 	add.w	r4, r6, #16
 8001142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800114e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001152:	1d33      	adds	r3, r6, #4
 8001154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f001 fde0 	bl	8002d1c <USB_CoreInit>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d005      	beq.n	800116e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2202      	movs	r2, #2
 8001166:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e0d0      	b.n	8001310 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fef7 	bl	8002f68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	e04a      	b.n	8001216 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	333d      	adds	r3, #61	; 0x3d
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	333c      	adds	r3, #60	; 0x3c
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	b298      	uxth	r0, r3
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	1a9b      	subs	r3, r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	3342      	adds	r3, #66	; 0x42
 80011bc:	4602      	mov	r2, r0
 80011be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	333f      	adds	r3, #63	; 0x3f
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	3344      	adds	r3, #68	; 0x44
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	3348      	adds	r3, #72	; 0x48
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3350      	adds	r3, #80	; 0x50
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	3301      	adds	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	429a      	cmp	r2, r3
 800121e:	d3af      	bcc.n	8001180 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e044      	b.n	80012b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	1a9b      	subs	r3, r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	1a9b      	subs	r3, r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	1a9b      	subs	r3, r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	1a9b      	subs	r3, r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	1a9b      	subs	r3, r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	3301      	adds	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d3b5      	bcc.n	8001226 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	687e      	ldr	r6, [r7, #4]
 80012c2:	466d      	mov	r5, sp
 80012c4:	f106 0410 	add.w	r4, r6, #16
 80012c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80012d8:	1d33      	adds	r3, r6, #4
 80012da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f001 fe6d 	bl	8002fbc <USB_DevInit>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2202      	movs	r2, #2
 80012ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00d      	b.n	8001310 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f002 feb5 	bl	8004078 <USB_DevDisconnect>

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001318 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_PCD_Start+0x1c>
 8001330:	2302      	movs	r3, #2
 8001332:	e020      	b.n	8001376 <HAL_PCD_Start+0x5e>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	2b01      	cmp	r3, #1
 8001342:	d109      	bne.n	8001358 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001348:	2b01      	cmp	r3, #1
 800134a:	d005      	beq.n	8001358 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001350:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f001 fde1 	bl	8002f24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fe65 	bl	8004036 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800137e:	b590      	push	{r4, r7, lr}
 8001380:	b08d      	sub	sp, #52	; 0x34
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f002 ff23 	bl	80041e0 <USB_GetMode>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	f040 839d 	bne.w	8001adc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fe87 	bl	80040ba <USB_ReadInterrupts>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8393 	beq.w	8001ada <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fe7e 	bl	80040ba <USB_ReadInterrupts>
 80013be:	4603      	mov	r3, r0
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d107      	bne.n	80013d8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	695a      	ldr	r2, [r3, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f002 0202 	and.w	r2, r2, #2
 80013d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fe6c 	bl	80040ba <USB_ReadInterrupts>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b10      	cmp	r3, #16
 80013ea:	d161      	bne.n	80014b0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	699a      	ldr	r2, [r3, #24]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0210 	bic.w	r2, r2, #16
 80013fa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	f003 020f 	and.w	r2, r3, #15
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	3304      	adds	r3, #4
 800141a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	0c5b      	lsrs	r3, r3, #17
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	2b02      	cmp	r3, #2
 8001426:	d124      	bne.n	8001472 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d035      	beq.n	80014a0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800143e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001442:	b29b      	uxth	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	6a38      	ldr	r0, [r7, #32]
 8001448:	f002 fcd2 	bl	8003df0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001458:	441a      	add	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	699a      	ldr	r2, [r3, #24]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800146a:	441a      	add	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	619a      	str	r2, [r3, #24]
 8001470:	e016      	b.n	80014a0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	0c5b      	lsrs	r3, r3, #17
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	2b06      	cmp	r3, #6
 800147c:	d110      	bne.n	80014a0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001484:	2208      	movs	r2, #8
 8001486:	4619      	mov	r1, r3
 8001488:	6a38      	ldr	r0, [r7, #32]
 800148a:	f002 fcb1 	bl	8003df0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	699a      	ldr	r2, [r3, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	091b      	lsrs	r3, r3, #4
 8001496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800149a:	441a      	add	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0210 	orr.w	r2, r2, #16
 80014ae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fe00 	bl	80040ba <USB_ReadInterrupts>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014c4:	d16e      	bne.n	80015a4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fe06 	bl	80040e0 <USB_ReadDevAllOutEpInterrupt>
 80014d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014d6:	e062      	b.n	800159e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d057      	beq.n	8001592 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fe2b 	bl	8004148 <USB_ReadDevOutEPInterrupt>
 80014f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00c      	beq.n	8001518 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	015a      	lsls	r2, r3, #5
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800150a:	461a      	mov	r2, r3
 800150c:	2301      	movs	r3, #1
 800150e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fdb0 	bl	8002078 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00c      	beq.n	800153c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152e:	461a      	mov	r2, r3
 8001530:	2308      	movs	r3, #8
 8001532:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 feaa 	bl	8002290 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	d008      	beq.n	8001558 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	015a      	lsls	r2, r3, #5
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	4413      	add	r3, r2
 800154e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001552:	461a      	mov	r2, r3
 8001554:	2310      	movs	r3, #16
 8001556:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f003 0320 	and.w	r3, r3, #32
 800155e:	2b00      	cmp	r3, #0
 8001560:	d008      	beq.n	8001574 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	015a      	lsls	r2, r3, #5
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800156e:	461a      	mov	r2, r3
 8001570:	2320      	movs	r3, #32
 8001572:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	015a      	lsls	r2, r3, #5
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	4413      	add	r3, r2
 8001586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800158a:	461a      	mov	r2, r3
 800158c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001590:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	3301      	adds	r3, #1
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d199      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fd86 	bl	80040ba <USB_ReadInterrupts>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015b8:	f040 80c0 	bne.w	800173c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f002 fda7 	bl	8004114 <USB_ReadDevAllInEpInterrupt>
 80015c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015cc:	e0b2      	b.n	8001734 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a7 	beq.w	8001728 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fdcd 	bl	8004184 <USB_ReadDevInEPInterrupt>
 80015ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d057      	beq.n	80016a6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	2201      	movs	r2, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43db      	mvns	r3, r3
 8001610:	69f9      	ldr	r1, [r7, #28]
 8001612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001616:	4013      	ands	r3, r2
 8001618:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001626:	461a      	mov	r2, r3
 8001628:	2301      	movs	r3, #1
 800162a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d132      	bne.n	800169a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3348      	adds	r3, #72	; 0x48
 8001644:	6819      	ldr	r1, [r3, #0]
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4403      	add	r3, r0
 8001654:	3344      	adds	r3, #68	; 0x44
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4419      	add	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4403      	add	r3, r0
 8001668:	3348      	adds	r3, #72	; 0x48
 800166a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	2b00      	cmp	r3, #0
 8001670:	d113      	bne.n	800169a <HAL_PCD_IRQHandler+0x31c>
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	1a9b      	subs	r3, r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	3350      	adds	r3, #80	; 0x50
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d108      	bne.n	800169a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001692:	461a      	mov	r2, r3
 8001694:	2101      	movs	r1, #1
 8001696:	f002 fdd5 	bl	8004244 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4619      	mov	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f004 fcf2 	bl	800608a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	015a      	lsls	r2, r3, #5
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016bc:	461a      	mov	r2, r3
 80016be:	2308      	movs	r3, #8
 80016c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	015a      	lsls	r2, r3, #5
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	4413      	add	r3, r2
 80016d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d8:	461a      	mov	r2, r3
 80016da:	2310      	movs	r3, #16
 80016dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	015a      	lsls	r2, r3, #5
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	4413      	add	r3, r2
 80016f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f4:	461a      	mov	r2, r3
 80016f6:	2340      	movs	r3, #64	; 0x40
 80016f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001710:	461a      	mov	r2, r3
 8001712:	2302      	movs	r3, #2
 8001714:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fc1b 	bl	8001f5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	3301      	adds	r3, #1
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001736:	2b00      	cmp	r3, #0
 8001738:	f47f af49 	bne.w	80015ce <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fcba 	bl	80040ba <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800174c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001750:	d122      	bne.n	8001798 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800176c:	2b01      	cmp	r3, #1
 800176e:	d108      	bne.n	8001782 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001778:	2100      	movs	r1, #0
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fe26 	bl	80023cc <HAL_PCDEx_LPM_Callback>
 8001780:	e002      	b.n	8001788 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f004 fcf8 	bl	8006178 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001796:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f002 fc8c 	bl	80040ba <USB_ReadInterrupts>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017ac:	d112      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d102      	bne.n	80017c4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f004 fcb4 	bl	800612c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017d2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fc6e 	bl	80040ba <USB_ReadInterrupts>
 80017de:	4603      	mov	r3, r0
 80017e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017e8:	f040 80c7 	bne.w	800197a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2110      	movs	r1, #16
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fd3c 	bl	8003284 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001810:	e056      	b.n	80018c0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001814:	015a      	lsls	r2, r3, #5
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800181e:	461a      	mov	r2, r3
 8001820:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001824:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4413      	add	r3, r2
 800182e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001836:	0151      	lsls	r1, r2, #5
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	440a      	add	r2, r1
 800183c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001840:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001844:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	015a      	lsls	r2, r3, #5
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	4413      	add	r3, r2
 800184e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001856:	0151      	lsls	r1, r2, #5
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	440a      	add	r2, r1
 800185c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001860:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001864:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	4413      	add	r3, r2
 800186e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001872:	461a      	mov	r2, r3
 8001874:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001878:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800188a:	0151      	lsls	r1, r2, #5
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	440a      	add	r2, r1
 8001890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001894:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001898:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	015a      	lsls	r2, r3, #5
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018aa:	0151      	lsls	r1, r2, #5
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	440a      	add	r2, r1
 80018b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018bc:	3301      	adds	r3, #1
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d3a3      	bcc.n	8001812 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d016      	beq.n	8001914 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f6:	f043 030b 	orr.w	r3, r3, #11
 80018fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800190c:	f043 030b 	orr.w	r3, r3, #11
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	e015      	b.n	8001940 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001926:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800192a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800193a:	f043 030b 	orr.w	r3, r3, #11
 800193e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001952:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001964:	461a      	mov	r2, r3
 8001966:	f002 fc6d 	bl	8004244 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001978:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f002 fb9b 	bl	80040ba <USB_ReadInterrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800198a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800198e:	d124      	bne.n	80019da <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 fc31 	bl	80041fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f001 fcd1 	bl	8003346 <USB_GetDevSpeed>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681c      	ldr	r4, [r3, #0]
 80019b0:	f001 f944 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 80019b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	4620      	mov	r0, r4
 80019c0:	f001 fa0e 	bl	8002de0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f004 fb88 	bl	80060da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fb6b 	bl	80040ba <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d10a      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f004 fb65 	bl	80060be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f002 0208 	and.w	r2, r2, #8
 8001a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fb56 	bl	80040ba <USB_ReadInterrupts>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a18:	d10f      	bne.n	8001a3a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4619      	mov	r1, r3
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f004 fbc7 	bl	80061b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fb3b 	bl	80040ba <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a4e:	d10f      	bne.n	8001a70 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f004 fb9a 	bl	8006194 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 fb20 	bl	80040ba <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a84:	d10a      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f004 fba8 	bl	80061dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 fb0a 	bl	80040ba <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d115      	bne.n	8001adc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f004 fb98 	bl	80061f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6859      	ldr	r1, [r3, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	e000      	b.n	8001adc <HAL_PCD_IRQHandler+0x75e>
      return;
 8001ada:	bf00      	nop
    }
  }
}
 8001adc:	3734      	adds	r7, #52	; 0x34
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}

08001ae2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_PCD_SetAddress+0x1a>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e013      	b.n	8001b24 <HAL_PCD_SetAddress+0x42>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	78fa      	ldrb	r2, [r7, #3]
 8001b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 fa68 	bl	8003fea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	70fb      	strb	r3, [r7, #3]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	803b      	strh	r3, [r7, #0]
 8001b42:	4613      	mov	r3, r2
 8001b44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da0f      	bge.n	8001b72 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	f003 020f 	and.w	r2, r3, #15
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	3338      	adds	r3, #56	; 0x38
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	3304      	adds	r3, #4
 8001b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	705a      	strb	r2, [r3, #1]
 8001b70:	e00f      	b.n	8001b92 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	f003 020f 	and.w	r2, r3, #15
 8001b78:	4613      	mov	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	3304      	adds	r3, #4
 8001b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b9e:	883a      	ldrh	r2, [r7, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	78ba      	ldrb	r2, [r7, #2]
 8001ba8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	785b      	ldrb	r3, [r3, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bbc:	78bb      	ldrb	r3, [r7, #2]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d102      	bne.n	8001bc8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_PCD_EP_Open+0xaa>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e00e      	b.n	8001bf4 <HAL_PCD_EP_Open+0xc8>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68f9      	ldr	r1, [r7, #12]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f001 fbd3 	bl	8003390 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	da0f      	bge.n	8001c30 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	f003 020f 	and.w	r2, r3, #15
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	3338      	adds	r3, #56	; 0x38
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	3304      	adds	r3, #4
 8001c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	705a      	strb	r2, [r3, #1]
 8001c2e:	e00f      	b.n	8001c50 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	f003 020f 	and.w	r2, r3, #15
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	3304      	adds	r3, #4
 8001c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_PCD_EP_Close+0x6e>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e00e      	b.n	8001c88 <HAL_PCD_EP_Close+0x8c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68f9      	ldr	r1, [r7, #12]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 fc11 	bl	80034a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca0:	7afb      	ldrb	r3, [r7, #11]
 8001ca2:	f003 020f 	and.w	r2, r3, #15
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd2:	7afb      	ldrb	r3, [r7, #11]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d102      	bne.n	8001cec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cec:	7afb      	ldrb	r3, [r7, #11]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	6979      	ldr	r1, [r7, #20]
 8001d04:	f001 feec 	bl	8003ae0 <USB_EP0StartXfer>
 8001d08:	e008      	b.n	8001d1c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	6979      	ldr	r1, [r7, #20]
 8001d18:	f001 fc9e 	bl	8003658 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 020f 	and.w	r2, r3, #15
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d48:	681b      	ldr	r3, [r3, #0]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	460b      	mov	r3, r1
 8001d64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	f003 020f 	and.w	r2, r3, #15
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	3338      	adds	r3, #56	; 0x38
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2201      	movs	r2, #1
 8001d94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d96:	7afb      	ldrb	r3, [r7, #11]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d102      	bne.n	8001db0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001db0:	7afb      	ldrb	r3, [r7, #11]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6979      	ldr	r1, [r7, #20]
 8001dc8:	f001 fe8a 	bl	8003ae0 <USB_EP0StartXfer>
 8001dcc:	e008      	b.n	8001de0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	6979      	ldr	r1, [r7, #20]
 8001ddc:	f001 fc3c 	bl	8003658 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 020f 	and.w	r2, r3, #15
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d901      	bls.n	8001e08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e050      	b.n	8001eaa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	da0f      	bge.n	8001e30 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	f003 020f 	and.w	r2, r3, #15
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	3338      	adds	r3, #56	; 0x38
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	3304      	adds	r3, #4
 8001e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	705a      	strb	r2, [r3, #1]
 8001e2e:	e00d      	b.n	8001e4c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_PCD_EP_SetStall+0x82>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e01e      	b.n	8001eaa <HAL_PCD_EP_SetStall+0xc0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68f9      	ldr	r1, [r7, #12]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 ffe1 	bl	8003e42 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10a      	bne.n	8001ea0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	b2d9      	uxtb	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f002 f9d2 	bl	8004244 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 020f 	and.w	r2, r3, #15
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d901      	bls.n	8001ed0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e042      	b.n	8001f56 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	da0f      	bge.n	8001ef8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	3338      	adds	r3, #56	; 0x38
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	705a      	strb	r2, [r3, #1]
 8001ef6:	e00f      	b.n	8001f18 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 020f 	and.w	r2, r3, #15
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3304      	adds	r3, #4
 8001f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_PCD_EP_ClrStall+0x86>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e00e      	b.n	8001f56 <HAL_PCD_EP_ClrStall+0xa4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68f9      	ldr	r1, [r7, #12]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 ffe9 	bl	8003f1e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b08a      	sub	sp, #40	; 0x28
 8001f62:	af02      	add	r7, sp, #8
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3338      	adds	r3, #56	; 0x38
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d901      	bls.n	8001f96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e06c      	b.n	8002070 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d902      	bls.n	8001fb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fba:	e02b      	b.n	8002014 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d902      	bls.n	8001fd8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3303      	adds	r3, #3
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	68d9      	ldr	r1, [r3, #12]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f001 fec5 	bl	8003d86 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	441a      	add	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	699a      	ldr	r2, [r3, #24]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	441a      	add	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	b29b      	uxth	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	429a      	cmp	r2, r3
 8002028:	d809      	bhi.n	800203e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002032:	429a      	cmp	r2, r3
 8002034:	d203      	bcs.n	800203e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1be      	bne.n	8001fbc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	429a      	cmp	r2, r3
 8002048:	d811      	bhi.n	800206e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	2201      	movs	r2, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800205e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	43db      	mvns	r3, r3
 8002064:	6939      	ldr	r1, [r7, #16]
 8002066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800206a:	4013      	ands	r3, r2
 800206c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	333c      	adds	r3, #60	; 0x3c
 8002090:	3304      	adds	r3, #4
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	f040 80a0 	bne.w	80021f0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d015      	beq.n	80020e6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4a72      	ldr	r2, [pc, #456]	; (8002288 <PCD_EP_OutXfrComplete_int+0x210>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	f240 80dd 	bls.w	800227e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80d7 	beq.w	800227e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020dc:	461a      	mov	r2, r3
 80020de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020e2:	6093      	str	r3, [r2, #8]
 80020e4:	e0cb      	b.n	800227e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fc:	461a      	mov	r2, r3
 80020fe:	2320      	movs	r3, #32
 8002100:	6093      	str	r3, [r2, #8]
 8002102:	e0bc      	b.n	800227e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 80b7 	bne.w	800227e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a5d      	ldr	r2, [pc, #372]	; (8002288 <PCD_EP_OutXfrComplete_int+0x210>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d90f      	bls.n	8002138 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212e:	461a      	mov	r2, r3
 8002130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002134:	6093      	str	r3, [r2, #8]
 8002136:	e0a2      	b.n	800227e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800214a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	0159      	lsls	r1, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	440b      	add	r3, r1
 8002154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800215e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4403      	add	r3, r0
 800216e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002172:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002186:	6819      	ldr	r1, [r3, #0]
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4403      	add	r3, r0
 8002196:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4419      	add	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4403      	add	r3, r0
 80021ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021b0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d114      	bne.n	80021e2 <PCD_EP_OutXfrComplete_int+0x16a>
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021da:	461a      	mov	r2, r3
 80021dc:	2101      	movs	r1, #1
 80021de:	f002 f831 	bl	8004244 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	4619      	mov	r1, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f003 ff33 	bl	8006054 <HAL_PCD_DataOutStageCallback>
 80021ee:	e046      	b.n	800227e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4a26      	ldr	r2, [pc, #152]	; (800228c <PCD_EP_OutXfrComplete_int+0x214>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d124      	bne.n	8002242 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220e:	461a      	mov	r2, r3
 8002210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002214:	6093      	str	r3, [r2, #8]
 8002216:	e032      	b.n	800227e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222e:	461a      	mov	r2, r3
 8002230:	2320      	movs	r3, #32
 8002232:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4619      	mov	r1, r3
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f003 ff0a 	bl	8006054 <HAL_PCD_DataOutStageCallback>
 8002240:	e01d      	b.n	800227e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d114      	bne.n	8002272 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d108      	bne.n	8002272 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800226a:	461a      	mov	r2, r3
 800226c:	2100      	movs	r1, #0
 800226e:	f001 ffe9 	bl	8004244 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	4619      	mov	r1, r3
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f003 feeb 	bl	8006054 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	4f54300a 	.word	0x4f54300a
 800228c:	4f54310a 	.word	0x4f54310a

08002290 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	333c      	adds	r3, #60	; 0x3c
 80022a8:	3304      	adds	r3, #4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4a15      	ldr	r2, [pc, #84]	; (8002318 <PCD_EP_OutSetupPacket_int+0x88>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d90e      	bls.n	80022e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d009      	beq.n	80022e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022dc:	461a      	mov	r2, r3
 80022de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f003 fea3 	bl	8006030 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <PCD_EP_OutSetupPacket_int+0x88>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d90c      	bls.n	800230c <PCD_EP_OutSetupPacket_int+0x7c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002304:	461a      	mov	r2, r3
 8002306:	2101      	movs	r1, #1
 8002308:	f001 ff9c 	bl	8004244 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	4f54300a 	.word	0x4f54300a

0800231c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
 8002328:	4613      	mov	r3, r2
 800232a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d107      	bne.n	800234a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800233a:	883b      	ldrh	r3, [r7, #0]
 800233c:	0419      	lsls	r1, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	430a      	orrs	r2, r1
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
 8002348:	e028      	b.n	800239c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	4413      	add	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e00d      	b.n	800237a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	3340      	adds	r3, #64	; 0x40
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4413      	add	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	3301      	adds	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	3b01      	subs	r3, #1
 8002380:	429a      	cmp	r2, r3
 8002382:	d3ec      	bcc.n	800235e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002384:	883b      	ldrh	r3, [r7, #0]
 8002386:	0418      	lsls	r0, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	3b01      	subs	r3, #1
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	4302      	orrs	r2, r0
 8002394:	3340      	adds	r3, #64	; 0x40
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e25b      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d075      	beq.n	80024ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002402:	4ba3      	ldr	r3, [pc, #652]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b04      	cmp	r3, #4
 800240c:	d00c      	beq.n	8002428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240e:	4ba0      	ldr	r3, [pc, #640]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002416:	2b08      	cmp	r3, #8
 8002418:	d112      	bne.n	8002440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241a:	4b9d      	ldr	r3, [pc, #628]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002426:	d10b      	bne.n	8002440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	4b99      	ldr	r3, [pc, #612]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d05b      	beq.n	80024ec <HAL_RCC_OscConfig+0x108>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d157      	bne.n	80024ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e236      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x74>
 800244a:	4b91      	ldr	r3, [pc, #580]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a90      	ldr	r2, [pc, #576]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e01d      	b.n	8002494 <HAL_RCC_OscConfig+0xb0>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x98>
 8002462:	4b8b      	ldr	r3, [pc, #556]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a8a      	ldr	r2, [pc, #552]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b88      	ldr	r3, [pc, #544]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a87      	ldr	r2, [pc, #540]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e00b      	b.n	8002494 <HAL_RCC_OscConfig+0xb0>
 800247c:	4b84      	ldr	r3, [pc, #528]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a83      	ldr	r2, [pc, #524]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b81      	ldr	r3, [pc, #516]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a80      	ldr	r2, [pc, #512]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 800248e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe fb2c 	bl	8000af8 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a4:	f7fe fb28 	bl	8000af8 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e1fb      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b76      	ldr	r3, [pc, #472]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0xc0>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe fb18 	bl	8000af8 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024cc:	f7fe fb14 	bl	8000af8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e1e7      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	4b6c      	ldr	r3, [pc, #432]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0xe8>
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d063      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fa:	4b65      	ldr	r3, [pc, #404]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002506:	4b62      	ldr	r3, [pc, #392]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250e:	2b08      	cmp	r3, #8
 8002510:	d11c      	bne.n	800254c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d116      	bne.n	800254c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x152>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e1bb      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	4b56      	ldr	r3, [pc, #344]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4952      	ldr	r1, [pc, #328]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	e03a      	b.n	80025c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002554:	4b4f      	ldr	r3, [pc, #316]	; (8002694 <HAL_RCC_OscConfig+0x2b0>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7fe facd 	bl	8000af8 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002562:	f7fe fac9 	bl	8000af8 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e19c      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	4b46      	ldr	r3, [pc, #280]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4940      	ldr	r1, [pc, #256]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <HAL_RCC_OscConfig+0x2b0>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe faac 	bl	8000af8 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a4:	f7fe faa8 	bl	8000af8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e17b      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	4b36      	ldr	r3, [pc, #216]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d030      	beq.n	8002630 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d016      	beq.n	8002604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d6:	4b30      	ldr	r3, [pc, #192]	; (8002698 <HAL_RCC_OscConfig+0x2b4>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe fa8c 	bl	8000af8 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe fa88 	bl	8000af8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e15b      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x200>
 8002602:	e015      	b.n	8002630 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002604:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_OscConfig+0x2b4>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7fe fa75 	bl	8000af8 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002612:	f7fe fa71 	bl	8000af8 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e144      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f0      	bne.n	8002612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a0 	beq.w	800277e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_OscConfig+0x2b8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d121      	bne.n	80026be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_RCC_OscConfig+0x2b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_RCC_OscConfig+0x2b8>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002686:	f7fe fa37 	bl	8000af8 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	e011      	b.n	80026b2 <HAL_RCC_OscConfig+0x2ce>
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	42470000 	.word	0x42470000
 8002698:	42470e80 	.word	0x42470e80
 800269c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a0:	f7fe fa2a 	bl	8000af8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0fd      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b81      	ldr	r3, [pc, #516]	; (80028b8 <HAL_RCC_OscConfig+0x4d4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
 80026c6:	4b7d      	ldr	r3, [pc, #500]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	4a7c      	ldr	r2, [pc, #496]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6713      	str	r3, [r2, #112]	; 0x70
 80026d2:	e01c      	b.n	800270e <HAL_RCC_OscConfig+0x32a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b05      	cmp	r3, #5
 80026da:	d10c      	bne.n	80026f6 <HAL_RCC_OscConfig+0x312>
 80026dc:	4b77      	ldr	r3, [pc, #476]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a76      	ldr	r2, [pc, #472]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	4b74      	ldr	r3, [pc, #464]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a73      	ldr	r2, [pc, #460]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
 80026f4:	e00b      	b.n	800270e <HAL_RCC_OscConfig+0x32a>
 80026f6:	4b71      	ldr	r3, [pc, #452]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a70      	ldr	r2, [pc, #448]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	4b6e      	ldr	r3, [pc, #440]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	4a6d      	ldr	r2, [pc, #436]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d015      	beq.n	8002742 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002716:	f7fe f9ef 	bl	8000af8 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271c:	e00a      	b.n	8002734 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271e:	f7fe f9eb 	bl	8000af8 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f241 3288 	movw	r2, #5000	; 0x1388
 800272c:	4293      	cmp	r3, r2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e0bc      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	4b61      	ldr	r3, [pc, #388]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0ee      	beq.n	800271e <HAL_RCC_OscConfig+0x33a>
 8002740:	e014      	b.n	800276c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002742:	f7fe f9d9 	bl	8000af8 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7fe f9d5 	bl	8000af8 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	; 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e0a6      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002760:	4b56      	ldr	r3, [pc, #344]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1ee      	bne.n	800274a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800276c:	7dfb      	ldrb	r3, [r7, #23]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d105      	bne.n	800277e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002772:	4b52      	ldr	r3, [pc, #328]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a51      	ldr	r2, [pc, #324]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 8002778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8092 	beq.w	80028ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002788:	4b4c      	ldr	r3, [pc, #304]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b08      	cmp	r3, #8
 8002792:	d05c      	beq.n	800284e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d141      	bne.n	8002820 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279c:	4b48      	ldr	r3, [pc, #288]	; (80028c0 <HAL_RCC_OscConfig+0x4dc>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7fe f9a9 	bl	8000af8 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fe f9a5 	bl	8000af8 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e078      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027bc:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f0      	bne.n	80027aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69da      	ldr	r2, [r3, #28]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	019b      	lsls	r3, r3, #6
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	3b01      	subs	r3, #1
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	061b      	lsls	r3, r3, #24
 80027ec:	4933      	ldr	r1, [pc, #204]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <HAL_RCC_OscConfig+0x4dc>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe f97e 	bl	8000af8 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe f97a 	bl	8000af8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e04d      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002812:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x41c>
 800281e:	e045      	b.n	80028ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_OscConfig+0x4dc>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe f967 	bl	8000af8 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe f963 	bl	8000af8 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e036      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x44a>
 800284c:	e02e      	b.n	80028ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e029      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_RCC_OscConfig+0x4d8>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	429a      	cmp	r2, r3
 800286c:	d11c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d115      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002882:	4013      	ands	r3, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002888:	4293      	cmp	r3, r2
 800288a:	d10d      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d106      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40007000 	.word	0x40007000
 80028bc:	40023800 	.word	0x40023800
 80028c0:	42470060 	.word	0x42470060

080028c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0cc      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d90c      	bls.n	8002900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800293a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d044      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d119      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d003      	beq.n	8002982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	2b03      	cmp	r3, #3
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e06f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e067      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4934      	ldr	r1, [pc, #208]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7fe f8a0 	bl	8000af8 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe f89c 	bl	8000af8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e04f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d20c      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4601      	mov	r1, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe f800 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023c00 	.word	0x40023c00
 8002a80:	40023800 	.word	0x40023800
 8002a84:	08006e78 	.word	0x08006e78
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	20000004 	.word	0x20000004

08002a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa6:	4b63      	ldr	r3, [pc, #396]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d007      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x32>
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d008      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x38>
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 80b4 	bne.w	8002c24 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002abc:	4b5e      	ldr	r3, [pc, #376]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002abe:	60bb      	str	r3, [r7, #8]
       break;
 8002ac0:	e0b3      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ac4:	60bb      	str	r3, [r7, #8]
      break;
 8002ac6:	e0b0      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ac8:	4b5a      	ldr	r3, [pc, #360]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ad2:	4b58      	ldr	r3, [pc, #352]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04a      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ade:	4b55      	ldr	r3, [pc, #340]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	099b      	lsrs	r3, r3, #6
 8002ae4:	f04f 0400 	mov.w	r4, #0
 8002ae8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	ea03 0501 	and.w	r5, r3, r1
 8002af4:	ea04 0602 	and.w	r6, r4, r2
 8002af8:	4629      	mov	r1, r5
 8002afa:	4632      	mov	r2, r6
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	f04f 0400 	mov.w	r4, #0
 8002b04:	0154      	lsls	r4, r2, #5
 8002b06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b0a:	014b      	lsls	r3, r1, #5
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4622      	mov	r2, r4
 8002b10:	1b49      	subs	r1, r1, r5
 8002b12:	eb62 0206 	sbc.w	r2, r2, r6
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	f04f 0400 	mov.w	r4, #0
 8002b1e:	0194      	lsls	r4, r2, #6
 8002b20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b24:	018b      	lsls	r3, r1, #6
 8002b26:	1a5b      	subs	r3, r3, r1
 8002b28:	eb64 0402 	sbc.w	r4, r4, r2
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	00e2      	lsls	r2, r4, #3
 8002b36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b3a:	00d9      	lsls	r1, r3, #3
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4614      	mov	r4, r2
 8002b40:	195b      	adds	r3, r3, r5
 8002b42:	eb44 0406 	adc.w	r4, r4, r6
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	02a2      	lsls	r2, r4, #10
 8002b50:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b54:	0299      	lsls	r1, r3, #10
 8002b56:	460b      	mov	r3, r1
 8002b58:	4614      	mov	r4, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f04f 0400 	mov.w	r4, #0
 8002b64:	461a      	mov	r2, r3
 8002b66:	4623      	mov	r3, r4
 8002b68:	f7fd fb8a 	bl	8000280 <__aeabi_uldivmod>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	460c      	mov	r4, r1
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	e049      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b74:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	099b      	lsrs	r3, r3, #6
 8002b7a:	f04f 0400 	mov.w	r4, #0
 8002b7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	ea03 0501 	and.w	r5, r3, r1
 8002b8a:	ea04 0602 	and.w	r6, r4, r2
 8002b8e:	4629      	mov	r1, r5
 8002b90:	4632      	mov	r2, r6
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	f04f 0400 	mov.w	r4, #0
 8002b9a:	0154      	lsls	r4, r2, #5
 8002b9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ba0:	014b      	lsls	r3, r1, #5
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	1b49      	subs	r1, r1, r5
 8002ba8:	eb62 0206 	sbc.w	r2, r2, r6
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	f04f 0400 	mov.w	r4, #0
 8002bb4:	0194      	lsls	r4, r2, #6
 8002bb6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bba:	018b      	lsls	r3, r1, #6
 8002bbc:	1a5b      	subs	r3, r3, r1
 8002bbe:	eb64 0402 	sbc.w	r4, r4, r2
 8002bc2:	f04f 0100 	mov.w	r1, #0
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	00e2      	lsls	r2, r4, #3
 8002bcc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bd0:	00d9      	lsls	r1, r3, #3
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4614      	mov	r4, r2
 8002bd6:	195b      	adds	r3, r3, r5
 8002bd8:	eb44 0406 	adc.w	r4, r4, r6
 8002bdc:	f04f 0100 	mov.w	r1, #0
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	02a2      	lsls	r2, r4, #10
 8002be6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bea:	0299      	lsls	r1, r3, #10
 8002bec:	460b      	mov	r3, r1
 8002bee:	4614      	mov	r4, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f04f 0400 	mov.w	r4, #0
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4623      	mov	r3, r4
 8002bfe:	f7fd fb3f 	bl	8000280 <__aeabi_uldivmod>
 8002c02:	4603      	mov	r3, r0
 8002c04:	460c      	mov	r4, r1
 8002c06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	3301      	adds	r3, #1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	60bb      	str	r3, [r7, #8]
      break;
 8002c22:	e002      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c26:	60bb      	str	r3, [r7, #8]
      break;
 8002c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	00f42400 	.word	0x00f42400

08002c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000000 	.word	0x20000000

08002c54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e056      	b.n	8002d14 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d106      	bne.n	8002c86 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7fd fde1 	bl	8000848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c9c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	ea42 0103 	orr.w	r1, r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	f003 0104 	and.w	r1, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	f107 001c 	add.w	r0, r7, #28
 8002d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d122      	bne.n	8002d7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d105      	bne.n	8002d6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f001 fac6 	bl	8004300 <USB_CoreReset>
 8002d74:	4603      	mov	r3, r0
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e01a      	b.n	8002db0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f001 faba 	bl	8004300 <USB_CoreReset>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
 8002da2:	e005      	b.n	8002db0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d10b      	bne.n	8002dce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f043 0206 	orr.w	r2, r3, #6
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dda:	b004      	add	sp, #16
 8002ddc:	4770      	bx	lr
	...

08002de0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d165      	bne.n	8002ec0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4a41      	ldr	r2, [pc, #260]	; (8002efc <USB_SetTurnaroundTime+0x11c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d906      	bls.n	8002e0a <USB_SetTurnaroundTime+0x2a>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4a40      	ldr	r2, [pc, #256]	; (8002f00 <USB_SetTurnaroundTime+0x120>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d802      	bhi.n	8002e0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e04:	230f      	movs	r3, #15
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e062      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <USB_SetTurnaroundTime+0x120>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d906      	bls.n	8002e20 <USB_SetTurnaroundTime+0x40>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <USB_SetTurnaroundTime+0x124>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d802      	bhi.n	8002e20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e1a:	230e      	movs	r3, #14
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e057      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <USB_SetTurnaroundTime+0x124>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d906      	bls.n	8002e36 <USB_SetTurnaroundTime+0x56>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4a37      	ldr	r2, [pc, #220]	; (8002f08 <USB_SetTurnaroundTime+0x128>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d802      	bhi.n	8002e36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e30:	230d      	movs	r3, #13
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	e04c      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4a33      	ldr	r2, [pc, #204]	; (8002f08 <USB_SetTurnaroundTime+0x128>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d906      	bls.n	8002e4c <USB_SetTurnaroundTime+0x6c>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4a32      	ldr	r2, [pc, #200]	; (8002f0c <USB_SetTurnaroundTime+0x12c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d802      	bhi.n	8002e4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e46:	230c      	movs	r3, #12
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e041      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4a2f      	ldr	r2, [pc, #188]	; (8002f0c <USB_SetTurnaroundTime+0x12c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d906      	bls.n	8002e62 <USB_SetTurnaroundTime+0x82>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4a2e      	ldr	r2, [pc, #184]	; (8002f10 <USB_SetTurnaroundTime+0x130>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d802      	bhi.n	8002e62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e5c:	230b      	movs	r3, #11
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	e036      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <USB_SetTurnaroundTime+0x130>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d906      	bls.n	8002e78 <USB_SetTurnaroundTime+0x98>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <USB_SetTurnaroundTime+0x134>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d802      	bhi.n	8002e78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e72:	230a      	movs	r3, #10
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	e02b      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <USB_SetTurnaroundTime+0x134>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d906      	bls.n	8002e8e <USB_SetTurnaroundTime+0xae>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <USB_SetTurnaroundTime+0x138>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d802      	bhi.n	8002e8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e88:	2309      	movs	r3, #9
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e020      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <USB_SetTurnaroundTime+0x138>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d906      	bls.n	8002ea4 <USB_SetTurnaroundTime+0xc4>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <USB_SetTurnaroundTime+0x13c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d802      	bhi.n	8002ea4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e015      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <USB_SetTurnaroundTime+0x13c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d906      	bls.n	8002eba <USB_SetTurnaroundTime+0xda>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <USB_SetTurnaroundTime+0x140>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d802      	bhi.n	8002eba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002eb4:	2307      	movs	r3, #7
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	e00a      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002eba:	2306      	movs	r3, #6
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e007      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ec6:	2309      	movs	r3, #9
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e001      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ecc:	2309      	movs	r3, #9
 8002ece:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	029b      	lsls	r3, r3, #10
 8002ee4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	00d8acbf 	.word	0x00d8acbf
 8002f00:	00e4e1bf 	.word	0x00e4e1bf
 8002f04:	00f423ff 	.word	0x00f423ff
 8002f08:	0106737f 	.word	0x0106737f
 8002f0c:	011a499f 	.word	0x011a499f
 8002f10:	01312cff 	.word	0x01312cff
 8002f14:	014ca43f 	.word	0x014ca43f
 8002f18:	016e35ff 	.word	0x016e35ff
 8002f1c:	01a6ab1f 	.word	0x01a6ab1f
 8002f20:	01e847ff 	.word	0x01e847ff

08002f24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f023 0201 	bic.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d106      	bne.n	8002f94 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e00b      	b.n	8002fac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	e001      	b.n	8002fac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e003      	b.n	8002fb4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002fac:	2032      	movs	r0, #50	; 0x32
 8002fae:	f7fd fdaf 	bl	8000b10 <HAL_Delay>

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e009      	b.n	8002ff0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	3340      	adds	r3, #64	; 0x40
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	3301      	adds	r3, #1
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b0e      	cmp	r3, #14
 8002ff4:	d9f2      	bls.n	8002fdc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11c      	bne.n	8003036 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800300a:	f043 0302 	orr.w	r3, r3, #2
 800300e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
 8003034:	e00b      	b.n	800304e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003054:	461a      	mov	r2, r3
 8003056:	2300      	movs	r3, #0
 8003058:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003060:	4619      	mov	r1, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003068:	461a      	mov	r2, r3
 800306a:	680b      	ldr	r3, [r1, #0]
 800306c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003070:	2b01      	cmp	r3, #1
 8003072:	d10c      	bne.n	800308e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d104      	bne.n	8003084 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800307a:	2100      	movs	r1, #0
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f949 	bl	8003314 <USB_SetDevSpeed>
 8003082:	e008      	b.n	8003096 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003084:	2101      	movs	r1, #1
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f944 	bl	8003314 <USB_SetDevSpeed>
 800308c:	e003      	b.n	8003096 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800308e:	2103      	movs	r1, #3
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f93f 	bl	8003314 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003096:	2110      	movs	r1, #16
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f8f3 	bl	8003284 <USB_FlushTxFifo>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f911 	bl	80032d0 <USB_FlushRxFifo>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030be:	461a      	mov	r2, r3
 80030c0:	2300      	movs	r3, #0
 80030c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ca:	461a      	mov	r2, r3
 80030cc:	2300      	movs	r3, #0
 80030ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d6:	461a      	mov	r2, r3
 80030d8:	2300      	movs	r3, #0
 80030da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030dc:	2300      	movs	r3, #0
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	e043      	b.n	800316a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030f8:	d118      	bne.n	800312c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310c:	461a      	mov	r2, r3
 800310e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e013      	b.n	800313e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003122:	461a      	mov	r2, r3
 8003124:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e008      	b.n	800313e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003138:	461a      	mov	r2, r3
 800313a:	2300      	movs	r3, #0
 800313c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314a:	461a      	mov	r2, r3
 800314c:	2300      	movs	r3, #0
 800314e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315c:	461a      	mov	r2, r3
 800315e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003162:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	3301      	adds	r3, #1
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	429a      	cmp	r2, r3
 8003170:	d3b7      	bcc.n	80030e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	e043      	b.n	8003200 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800318a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800318e:	d118      	bne.n	80031c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a2:	461a      	mov	r2, r3
 80031a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e013      	b.n	80031d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b8:	461a      	mov	r2, r3
 80031ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e008      	b.n	80031d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ce:	461a      	mov	r2, r3
 80031d0:	2300      	movs	r3, #0
 80031d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e0:	461a      	mov	r2, r3
 80031e2:	2300      	movs	r3, #0
 80031e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f2:	461a      	mov	r2, r3
 80031f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3301      	adds	r3, #1
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	429a      	cmp	r2, r3
 8003206:	d3b7      	bcc.n	8003178 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800321a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003228:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	2b00      	cmp	r3, #0
 800322e:	d105      	bne.n	800323c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f043 0210 	orr.w	r2, r3, #16
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <USB_DevInit+0x2c4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f043 0208 	orr.w	r2, r3, #8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800325a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325c:	2b01      	cmp	r3, #1
 800325e:	d107      	bne.n	8003270 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003270:	7dfb      	ldrb	r3, [r7, #23]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800327c:	b004      	add	sp, #16
 800327e:	4770      	bx	lr
 8003280:	803c3800 	.word	0x803c3800

08003284 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	019b      	lsls	r3, r3, #6
 8003296:	f043 0220 	orr.w	r2, r3, #32
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3301      	adds	r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <USB_FlushTxFifo+0x48>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e006      	b.n	80032be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d0f0      	beq.n	800329e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	00030d40 	.word	0x00030d40

080032d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2210      	movs	r2, #16
 80032e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3301      	adds	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a09      	ldr	r2, [pc, #36]	; (8003310 <USB_FlushRxFifo+0x40>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e006      	b.n	8003302 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d0f0      	beq.n	80032e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	00030d40 	.word	0x00030d40

08003314 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	68f9      	ldr	r1, [r7, #12]
 8003330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003346:	b480      	push	{r7}
 8003348:	b087      	sub	sp, #28
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 0306 	and.w	r3, r3, #6
 800335e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003366:	2300      	movs	r3, #0
 8003368:	75fb      	strb	r3, [r7, #23]
 800336a:	e00a      	b.n	8003382 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d002      	beq.n	8003378 <USB_GetDevSpeed+0x32>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b06      	cmp	r3, #6
 8003376:	d102      	bne.n	800337e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003378:	2302      	movs	r3, #2
 800337a:	75fb      	strb	r3, [r7, #23]
 800337c:	e001      	b.n	8003382 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800337e:	230f      	movs	r3, #15
 8003380:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003382:	7dfb      	ldrb	r3, [r7, #23]
}
 8003384:	4618      	mov	r0, r3
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	785b      	ldrb	r3, [r3, #1]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d13a      	bne.n	8003422 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	68f9      	ldr	r1, [r7, #12]
 80033c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d155      	bne.n	8003490 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003400:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	059b      	lsls	r3, r3, #22
 8003406:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003408:	4313      	orrs	r3, r2
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	0151      	lsls	r1, r2, #5
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	440a      	add	r2, r1
 8003412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	e036      	b.n	8003490 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	2101      	movs	r1, #1
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	68f9      	ldr	r1, [r7, #12]
 800343c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003440:	4313      	orrs	r3, r2
 8003442:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d11a      	bne.n	8003490 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	78db      	ldrb	r3, [r3, #3]
 8003474:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003476:	430b      	orrs	r3, r1
 8003478:	4313      	orrs	r3, r2
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	0151      	lsls	r1, r2, #5
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	440a      	add	r2, r1
 8003482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d161      	bne.n	8003580 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d2:	d11f      	bne.n	8003514 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	0151      	lsls	r1, r2, #5
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	440a      	add	r2, r1
 80034ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	0151      	lsls	r1, r2, #5
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	440a      	add	r2, r1
 800350a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800350e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003512:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	2101      	movs	r1, #1
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	b29b      	uxth	r3, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	68f9      	ldr	r1, [r7, #12]
 8003530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003534:	4013      	ands	r3, r2
 8003536:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	b29b      	uxth	r3, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003558:	4013      	ands	r3, r2
 800355a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	0159      	lsls	r1, r3, #5
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	440b      	add	r3, r1
 8003572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003576:	4619      	mov	r1, r3
 8003578:	4b35      	ldr	r3, [pc, #212]	; (8003650 <USB_DeactivateEndpoint+0x1b0>)
 800357a:	4013      	ands	r3, r2
 800357c:	600b      	str	r3, [r1, #0]
 800357e:	e060      	b.n	8003642 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003596:	d11f      	bne.n	80035d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	0151      	lsls	r1, r2, #5
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	440a      	add	r2, r1
 80035ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	041b      	lsls	r3, r3, #16
 80035f0:	43db      	mvns	r3, r3
 80035f2:	68f9      	ldr	r1, [r7, #12]
 80035f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035f8:	4013      	ands	r3, r2
 80035fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	041b      	lsls	r3, r3, #16
 8003614:	43db      	mvns	r3, r3
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800361c:	4013      	ands	r3, r2
 800361e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	0159      	lsls	r1, r3, #5
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	440b      	add	r3, r1
 8003636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363a:	4619      	mov	r1, r3
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <USB_DeactivateEndpoint+0x1b4>)
 800363e:	4013      	ands	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	ec337800 	.word	0xec337800
 8003654:	eff37800 	.word	0xeff37800

08003658 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af02      	add	r7, sp, #8
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b01      	cmp	r3, #1
 8003676:	f040 815c 	bne.w	8003932 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d132      	bne.n	80036e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	0151      	lsls	r1, r2, #5
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	440a      	add	r2, r1
 8003698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800369c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	0151      	lsls	r1, r2, #5
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	440a      	add	r2, r1
 80036bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	0151      	lsls	r1, r2, #5
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	440a      	add	r2, r1
 80036dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e0:	0cdb      	lsrs	r3, r3, #19
 80036e2:	04db      	lsls	r3, r3, #19
 80036e4:	6113      	str	r3, [r2, #16]
 80036e6:	e074      	b.n	80037d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003702:	0cdb      	lsrs	r3, r3, #19
 8003704:	04db      	lsls	r3, r3, #19
 8003706:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	0151      	lsls	r1, r2, #5
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	440a      	add	r2, r1
 800371e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003722:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003726:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800372a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	6959      	ldr	r1, [r3, #20]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	440b      	add	r3, r1
 8003744:	1e59      	subs	r1, r3, #1
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	fbb1 f3f3 	udiv	r3, r1, r3
 800374e:	04d9      	lsls	r1, r3, #19
 8003750:	4b9d      	ldr	r3, [pc, #628]	; (80039c8 <USB_EPStartXfer+0x370>)
 8003752:	400b      	ands	r3, r1
 8003754:	69b9      	ldr	r1, [r7, #24]
 8003756:	0148      	lsls	r0, r1, #5
 8003758:	69f9      	ldr	r1, [r7, #28]
 800375a:	4401      	add	r1, r0
 800375c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003760:	4313      	orrs	r3, r2
 8003762:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377a:	69b9      	ldr	r1, [r7, #24]
 800377c:	0148      	lsls	r0, r1, #5
 800377e:	69f9      	ldr	r1, [r7, #28]
 8003780:	4401      	add	r1, r0
 8003782:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003786:	4313      	orrs	r3, r2
 8003788:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	78db      	ldrb	r3, [r3, #3]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d11f      	bne.n	80037d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	0151      	lsls	r1, r2, #5
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	440a      	add	r2, r1
 80037a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80037b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	0151      	lsls	r1, r2, #5
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	440a      	add	r2, r1
 80037c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d14b      	bne.n	8003870 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d009      	beq.n	80037f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ec:	461a      	mov	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	78db      	ldrb	r3, [r3, #3]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d128      	bne.n	800384e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d110      	bne.n	800382e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	0151      	lsls	r1, r2, #5
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	440a      	add	r2, r1
 8003822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003826:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	e00f      	b.n	800384e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	0151      	lsls	r1, r2, #5
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	440a      	add	r2, r1
 8003844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	0151      	lsls	r1, r2, #5
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	440a      	add	r2, r1
 8003864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003868:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e12f      	b.n	8003ad0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	0151      	lsls	r1, r2, #5
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	440a      	add	r2, r1
 8003886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800388a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800388e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	78db      	ldrb	r3, [r3, #3]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d015      	beq.n	80038c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8117 	beq.w	8003ad0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	2101      	movs	r1, #1
 80038b4:	fa01 f303 	lsl.w	r3, r1, r3
 80038b8:	69f9      	ldr	r1, [r7, #28]
 80038ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038be:	4313      	orrs	r3, r2
 80038c0:	634b      	str	r3, [r1, #52]	; 0x34
 80038c2:	e105      	b.n	8003ad0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d110      	bne.n	80038f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	0151      	lsls	r1, r2, #5
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	440a      	add	r2, r1
 80038ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	e00f      	b.n	8003916 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	0151      	lsls	r1, r2, #5
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	440a      	add	r2, r1
 800390c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003914:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	68d9      	ldr	r1, [r3, #12]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	b298      	uxth	r0, r3
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	4603      	mov	r3, r0
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fa2b 	bl	8003d86 <USB_WritePacket>
 8003930:	e0ce      	b.n	8003ad0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	0151      	lsls	r1, r2, #5
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	440a      	add	r2, r1
 8003948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800394c:	0cdb      	lsrs	r3, r3, #19
 800394e:	04db      	lsls	r3, r3, #19
 8003950:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	0151      	lsls	r1, r2, #5
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	440a      	add	r2, r1
 8003968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003970:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003974:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d126      	bne.n	80039cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003994:	69b9      	ldr	r1, [r7, #24]
 8003996:	0148      	lsls	r0, r1, #5
 8003998:	69f9      	ldr	r1, [r7, #28]
 800399a:	4401      	add	r1, r0
 800399c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039a0:	4313      	orrs	r3, r2
 80039a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039c2:	6113      	str	r3, [r2, #16]
 80039c4:	e036      	b.n	8003a34 <USB_EPStartXfer+0x3dc>
 80039c6:	bf00      	nop
 80039c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4413      	add	r3, r2
 80039d6:	1e5a      	subs	r2, r3, #1
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	8afb      	ldrh	r3, [r7, #22]
 80039f2:	04d9      	lsls	r1, r3, #19
 80039f4:	4b39      	ldr	r3, [pc, #228]	; (8003adc <USB_EPStartXfer+0x484>)
 80039f6:	400b      	ands	r3, r1
 80039f8:	69b9      	ldr	r1, [r7, #24]
 80039fa:	0148      	lsls	r0, r1, #5
 80039fc:	69f9      	ldr	r1, [r7, #28]
 80039fe:	4401      	add	r1, r0
 8003a00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a04:	4313      	orrs	r3, r2
 8003a06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	8af9      	ldrh	r1, [r7, #22]
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a24:	69b9      	ldr	r1, [r7, #24]
 8003a26:	0148      	lsls	r0, r1, #5
 8003a28:	69f9      	ldr	r1, [r7, #28]
 8003a2a:	4401      	add	r1, r0
 8003a2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a30:	4313      	orrs	r3, r2
 8003a32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d10d      	bne.n	8003a56 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	68d9      	ldr	r1, [r3, #12]
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	460a      	mov	r2, r1
 8003a54:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	78db      	ldrb	r3, [r3, #3]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d128      	bne.n	8003ab0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d110      	bne.n	8003a90 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	0151      	lsls	r1, r2, #5
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	440a      	add	r2, r1
 8003a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e00f      	b.n	8003ab0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	0151      	lsls	r1, r2, #5
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	440a      	add	r2, r1
 8003aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	0151      	lsls	r1, r2, #5
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	440a      	add	r2, r1
 8003ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ace:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	1ff80000 	.word	0x1ff80000

08003ae0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	4613      	mov	r3, r2
 8003aec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	785b      	ldrb	r3, [r3, #1]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	f040 80cd 	bne.w	8003c9c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d132      	bne.n	8003b70 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	0151      	lsls	r1, r2, #5
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	440a      	add	r2, r1
 8003b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	0151      	lsls	r1, r2, #5
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	440a      	add	r2, r1
 8003b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	0151      	lsls	r1, r2, #5
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	440a      	add	r2, r1
 8003b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b68:	0cdb      	lsrs	r3, r3, #19
 8003b6a:	04db      	lsls	r3, r3, #19
 8003b6c:	6113      	str	r3, [r2, #16]
 8003b6e:	e04e      	b.n	8003c0e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	0151      	lsls	r1, r2, #5
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	440a      	add	r2, r1
 8003b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b8a:	0cdb      	lsrs	r3, r3, #19
 8003b8c:	04db      	lsls	r3, r3, #19
 8003b8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	0151      	lsls	r1, r2, #5
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003baa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bb2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d903      	bls.n	8003bc8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003be6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfe:	6939      	ldr	r1, [r7, #16]
 8003c00:	0148      	lsls	r0, r1, #5
 8003c02:	6979      	ldr	r1, [r7, #20]
 8003c04:	4401      	add	r1, r0
 8003c06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d11e      	bne.n	8003c52 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d009      	beq.n	8003c30 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	0151      	lsls	r1, r2, #5
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	440a      	add	r2, r1
 8003c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	e092      	b.n	8003d78 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	0151      	lsls	r1, r2, #5
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	440a      	add	r2, r1
 8003c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c70:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d07e      	beq.n	8003d78 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	6979      	ldr	r1, [r7, #20]
 8003c92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c96:	4313      	orrs	r3, r2
 8003c98:	634b      	str	r3, [r1, #52]	; 0x34
 8003c9a:	e06d      	b.n	8003d78 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	0151      	lsls	r1, r2, #5
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	440a      	add	r2, r1
 8003cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cb6:	0cdb      	lsrs	r3, r3, #19
 8003cb8:	04db      	lsls	r3, r3, #19
 8003cba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	0151      	lsls	r1, r2, #5
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cde:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d26:	6939      	ldr	r1, [r7, #16]
 8003d28:	0148      	lsls	r0, r1, #5
 8003d2a:	6979      	ldr	r1, [r7, #20]
 8003d2c:	4401      	add	r1, r0
 8003d2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d32:	4313      	orrs	r3, r2
 8003d34:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d10d      	bne.n	8003d58 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d009      	beq.n	8003d58 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	68d9      	ldr	r1, [r3, #12]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d54:	460a      	mov	r2, r1
 8003d56:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	0151      	lsls	r1, r2, #5
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	440a      	add	r2, r1
 8003d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b089      	sub	sp, #36	; 0x24
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	4611      	mov	r1, r2
 8003d92:	461a      	mov	r2, r3
 8003d94:	460b      	mov	r3, r1
 8003d96:	71fb      	strb	r3, [r7, #7]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003da4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d11a      	bne.n	8003de2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003dac:	88bb      	ldrh	r3, [r7, #4]
 8003dae:	3303      	adds	r3, #3
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003db4:	2300      	movs	r3, #0
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	e00f      	b.n	8003dda <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	031a      	lsls	r2, r3, #12
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d3eb      	bcc.n	8003dba <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3724      	adds	r7, #36	; 0x24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b089      	sub	sp, #36	; 0x24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	3303      	adds	r3, #3
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	e00b      	b.n	8003e2c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	3304      	adds	r3, #4
 8003e24:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d3ef      	bcc.n	8003e14 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003e34:	69fb      	ldr	r3, [r7, #28]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3724      	adds	r7, #36	; 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	785b      	ldrb	r3, [r3, #1]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d12c      	bne.n	8003eb8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	db12      	blt.n	8003e96 <USB_EPSetStall+0x54>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00f      	beq.n	8003e96 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	0151      	lsls	r1, r2, #5
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	440a      	add	r2, r1
 8003e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e94:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	0151      	lsls	r1, r2, #5
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	440a      	add	r2, r1
 8003eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e02b      	b.n	8003f10 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	db12      	blt.n	8003ef0 <USB_EPSetStall+0xae>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00f      	beq.n	8003ef0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	0151      	lsls	r1, r2, #5
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003eee:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	0151      	lsls	r1, r2, #5
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	440a      	add	r2, r1
 8003f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	785b      	ldrb	r3, [r3, #1]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d128      	bne.n	8003f8c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	0151      	lsls	r1, r2, #5
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	440a      	add	r2, r1
 8003f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	78db      	ldrb	r3, [r3, #3]
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d003      	beq.n	8003f6a <USB_EPClearStall+0x4c>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	78db      	ldrb	r3, [r3, #3]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d138      	bne.n	8003fdc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	0151      	lsls	r1, r2, #5
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	440a      	add	r2, r1
 8003f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e027      	b.n	8003fdc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003faa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	78db      	ldrb	r3, [r3, #3]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d003      	beq.n	8003fbc <USB_EPClearStall+0x9e>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	78db      	ldrb	r3, [r3, #3]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d10f      	bne.n	8003fdc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	0151      	lsls	r1, r2, #5
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004008:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800400c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800401e:	68f9      	ldr	r1, [r7, #12]
 8004020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004050:	f023 0303 	bic.w	r3, r3, #3
 8004054:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004064:	f023 0302 	bic.w	r3, r3, #2
 8004068:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004092:	f023 0303 	bic.w	r3, r3, #3
 8004096:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040a6:	f043 0302 	orr.w	r3, r3, #2
 80040aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b085      	sub	sp, #20
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4013      	ands	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80040d2:	68fb      	ldr	r3, [r7, #12]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4013      	ands	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	0c1b      	lsrs	r3, r3, #16
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	b29b      	uxth	r3, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004176:	68bb      	ldr	r3, [r7, #8]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
 80041b4:	01db      	lsls	r3, r3, #7
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4013      	ands	r3, r2
 80041d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041d2:	68bb      	ldr	r3, [r7, #8]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0301 	and.w	r3, r3, #1
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004216:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800421a:	f023 0307 	bic.w	r3, r3, #7
 800421e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004232:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	460b      	mov	r3, r1
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	333c      	adds	r3, #60	; 0x3c
 800425a:	3304      	adds	r3, #4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4a26      	ldr	r2, [pc, #152]	; (80042fc <USB_EP0_OutStart+0xb8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d90a      	bls.n	800427e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004278:	d101      	bne.n	800427e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e037      	b.n	80042ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	461a      	mov	r2, r3
 8004286:	2300      	movs	r3, #0
 8004288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800429c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ac:	f043 0318 	orr.w	r3, r3, #24
 80042b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80042c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80042c6:	7afb      	ldrb	r3, [r7, #11]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d10f      	bne.n	80042ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d2:	461a      	mov	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80042ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	4f54300a 	.word	0x4f54300a

08004300 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3301      	adds	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4a13      	ldr	r2, [pc, #76]	; (8004364 <USB_CoreReset+0x64>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e01b      	b.n	8004356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	daf2      	bge.n	800430c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f043 0201 	orr.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3301      	adds	r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a09      	ldr	r2, [pc, #36]	; (8004364 <USB_CoreReset+0x64>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e006      	b.n	8004356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	d0f0      	beq.n	8004336 <USB_CoreReset+0x36>

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	00030d40 	.word	0x00030d40

08004368 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004374:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004378:	f002 f92c 	bl	80065d4 <malloc>
 800437c:	4603      	mov	r3, r0
 800437e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d105      	bne.n	8004392 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800438e:	2302      	movs	r3, #2
 8004390:	e066      	b.n	8004460 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	7c1b      	ldrb	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d119      	bne.n	80043d6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80043a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043a6:	2202      	movs	r2, #2
 80043a8:	2181      	movs	r1, #129	; 0x81
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f001 ff99 	bl	80062e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80043b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ba:	2202      	movs	r2, #2
 80043bc:	2101      	movs	r1, #1
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f001 ff8f 	bl	80062e2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2210      	movs	r2, #16
 80043d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80043d4:	e016      	b.n	8004404 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80043d6:	2340      	movs	r3, #64	; 0x40
 80043d8:	2202      	movs	r2, #2
 80043da:	2181      	movs	r1, #129	; 0x81
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f001 ff80 	bl	80062e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80043e8:	2340      	movs	r3, #64	; 0x40
 80043ea:	2202      	movs	r2, #2
 80043ec:	2101      	movs	r1, #1
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f001 ff77 	bl	80062e2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2210      	movs	r2, #16
 8004400:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004404:	2308      	movs	r3, #8
 8004406:	2203      	movs	r2, #3
 8004408:	2182      	movs	r1, #130	; 0x82
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f001 ff69 	bl	80062e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	7c1b      	ldrb	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004444:	2101      	movs	r1, #1
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f002 f83a 	bl	80064c0 <USBD_LL_PrepareReceive>
 800444c:	e007      	b.n	800445e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004454:	2340      	movs	r3, #64	; 0x40
 8004456:	2101      	movs	r1, #1
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f002 f831 	bl	80064c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004478:	2181      	movs	r1, #129	; 0x81
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f001 ff57 	bl	800632e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004486:	2101      	movs	r1, #1
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f001 ff50 	bl	800632e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004496:	2182      	movs	r1, #130	; 0x82
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f001 ff48 	bl	800632e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00e      	beq.n	80044d6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044c8:	4618      	mov	r0, r3
 80044ca:	f002 f88b 	bl	80065e4 <free>
    pdev->pClassData = NULL;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044f0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004506:	2b00      	cmp	r3, #0
 8004508:	d03a      	beq.n	8004580 <USBD_CDC_Setup+0xa0>
 800450a:	2b20      	cmp	r3, #32
 800450c:	f040 8097 	bne.w	800463e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	88db      	ldrh	r3, [r3, #6]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d029      	beq.n	800456c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b25b      	sxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	da11      	bge.n	8004546 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800452e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	88d2      	ldrh	r2, [r2, #6]
 8004534:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004536:	6939      	ldr	r1, [r7, #16]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	88db      	ldrh	r3, [r3, #6]
 800453c:	461a      	mov	r2, r3
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f001 fa9d 	bl	8005a7e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004544:	e082      	b.n	800464c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	785a      	ldrb	r2, [r3, #1]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	88db      	ldrh	r3, [r3, #6]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800455c:	6939      	ldr	r1, [r7, #16]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	88db      	ldrh	r3, [r3, #6]
 8004562:	461a      	mov	r2, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f001 fab6 	bl	8005ad6 <USBD_CtlPrepareRx>
    break;
 800456a:	e06f      	b.n	800464c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	7850      	ldrb	r0, [r2, #1]
 8004578:	2200      	movs	r2, #0
 800457a:	6839      	ldr	r1, [r7, #0]
 800457c:	4798      	blx	r3
    break;
 800457e:	e065      	b.n	800464c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	785b      	ldrb	r3, [r3, #1]
 8004584:	2b0b      	cmp	r3, #11
 8004586:	d84f      	bhi.n	8004628 <USBD_CDC_Setup+0x148>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <USBD_CDC_Setup+0xb0>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045c1 	.word	0x080045c1
 8004594:	08004637 	.word	0x08004637
 8004598:	08004629 	.word	0x08004629
 800459c:	08004629 	.word	0x08004629
 80045a0:	08004629 	.word	0x08004629
 80045a4:	08004629 	.word	0x08004629
 80045a8:	08004629 	.word	0x08004629
 80045ac:	08004629 	.word	0x08004629
 80045b0:	08004629 	.word	0x08004629
 80045b4:	08004629 	.word	0x08004629
 80045b8:	080045e9 	.word	0x080045e9
 80045bc:	08004611 	.word	0x08004611
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d107      	bne.n	80045da <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80045ca:	f107 030c 	add.w	r3, r7, #12
 80045ce:	2202      	movs	r2, #2
 80045d0:	4619      	mov	r1, r3
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f001 fa53 	bl	8005a7e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80045d8:	e030      	b.n	800463c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 f9dd 	bl	800599c <USBD_CtlError>
        ret = USBD_FAIL;
 80045e2:	2303      	movs	r3, #3
 80045e4:	75fb      	strb	r3, [r7, #23]
      break;
 80045e6:	e029      	b.n	800463c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d107      	bne.n	8004602 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80045f2:	f107 030f 	add.w	r3, r7, #15
 80045f6:	2201      	movs	r2, #1
 80045f8:	4619      	mov	r1, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f001 fa3f 	bl	8005a7e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004600:	e01c      	b.n	800463c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f001 f9c9 	bl	800599c <USBD_CtlError>
        ret = USBD_FAIL;
 800460a:	2303      	movs	r3, #3
 800460c:	75fb      	strb	r3, [r7, #23]
      break;
 800460e:	e015      	b.n	800463c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004616:	2b03      	cmp	r3, #3
 8004618:	d00f      	beq.n	800463a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800461a:	6839      	ldr	r1, [r7, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f001 f9bd 	bl	800599c <USBD_CtlError>
        ret = USBD_FAIL;
 8004622:	2303      	movs	r3, #3
 8004624:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004626:	e008      	b.n	800463a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004628:	6839      	ldr	r1, [r7, #0]
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f001 f9b6 	bl	800599c <USBD_CtlError>
      ret = USBD_FAIL;
 8004630:	2303      	movs	r3, #3
 8004632:	75fb      	strb	r3, [r7, #23]
      break;
 8004634:	e002      	b.n	800463c <USBD_CDC_Setup+0x15c>
      break;
 8004636:	bf00      	nop
 8004638:	e008      	b.n	800464c <USBD_CDC_Setup+0x16c>
      break;
 800463a:	bf00      	nop
    }
    break;
 800463c:	e006      	b.n	800464c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800463e:	6839      	ldr	r1, [r7, #0]
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f001 f9ab 	bl	800599c <USBD_CtlError>
    ret = USBD_FAIL;
 8004646:	2303      	movs	r3, #3
 8004648:	75fb      	strb	r3, [r7, #23]
    break;
 800464a:	bf00      	nop
  }

  return (uint8_t)ret;
 800464c:	7dfb      	ldrb	r3, [r7, #23]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop

08004658 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800466a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004676:	2303      	movs	r3, #3
 8004678:	e049      	b.n	800470e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004680:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	3318      	adds	r3, #24
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d029      	beq.n	80046ec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	3318      	adds	r3, #24
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	78f9      	ldrb	r1, [r7, #3]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	460b      	mov	r3, r1
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	1a5b      	subs	r3, r3, r1
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4403      	add	r3, r0
 80046b8:	3344      	adds	r3, #68	; 0x44
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80046c0:	fb03 f301 	mul.w	r3, r3, r1
 80046c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d110      	bne.n	80046ec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	3318      	adds	r3, #24
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80046de:	78f9      	ldrb	r1, [r7, #3]
 80046e0:	2300      	movs	r3, #0
 80046e2:	2200      	movs	r2, #0
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f001 feca 	bl	800647e <USBD_LL_Transmit>
 80046ea:	e00f      	b.n	800470c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	460b      	mov	r3, r1
 8004720:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004728:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004734:	2303      	movs	r3, #3
 8004736:	e015      	b.n	8004764 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f001 fee0 	bl	8006502 <USBD_LL_GetRxDataSize>
 8004742:	4602      	mov	r2, r0
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800475e:	4611      	mov	r1, r2
 8004760:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800477a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d015      	beq.n	80047b2 <USBD_CDC_EP0_RxReady+0x46>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800478c:	2bff      	cmp	r3, #255	; 0xff
 800478e:	d010      	beq.n	80047b2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800479e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80047a6:	b292      	uxth	r2, r2
 80047a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	22ff      	movs	r2, #255	; 0xff
 80047ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2243      	movs	r2, #67	; 0x43
 80047c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80047ca:	4b03      	ldr	r3, [pc, #12]	; (80047d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	20000094 	.word	0x20000094

080047dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2243      	movs	r2, #67	; 0x43
 80047e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80047ea:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	20000050 	.word	0x20000050

080047fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2243      	movs	r2, #67	; 0x43
 8004808:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800480a:	4b03      	ldr	r3, [pc, #12]	; (8004818 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	200000d8 	.word	0x200000d8

0800481c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	220a      	movs	r2, #10
 8004828:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800482a:	4b03      	ldr	r3, [pc, #12]	; (8004838 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	2000000c 	.word	0x2000000c

0800483c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800484c:	2303      	movs	r3, #3
 800484e:	e004      	b.n	800485a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004866:	b480      	push	{r7}
 8004868:	b087      	sub	sp, #28
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004878:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048a8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80048de:	2303      	movs	r3, #3
 80048e0:	e01a      	b.n	8004918 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d114      	bne.n	8004916 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800490a:	2181      	movs	r1, #129	; 0x81
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f001 fdb6 	bl	800647e <USBD_LL_Transmit>

    ret = USBD_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004916:	7bfb      	ldrb	r3, [r7, #15]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800492e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800493a:	2303      	movs	r3, #3
 800493c:	e016      	b.n	800496c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	7c1b      	ldrb	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800494c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004950:	2101      	movs	r1, #1
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f001 fdb4 	bl	80064c0 <USBD_LL_PrepareReceive>
 8004958:	e007      	b.n	800496a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004960:	2340      	movs	r3, #64	; 0x40
 8004962:	2101      	movs	r1, #1
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f001 fdab 	bl	80064c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	4613      	mov	r3, r2
 8004980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004988:	2303      	movs	r3, #3
 800498a:	e025      	b.n	80049d8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	79fa      	ldrb	r2, [r7, #7]
 80049ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f001 fc21 	bl	8006214 <USBD_LL_Init>
 80049d2:	4603      	mov	r3, r0
 80049d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e010      	b.n	8004a1a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	f107 020e 	add.w	r2, r7, #14
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4798      	blx	r3
 8004a10:	4602      	mov	r2, r0
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f001 fc3e 	bl	80062ac <USBD_LL_Start>
 8004a30:	4603      	mov	r3, r0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	4611      	mov	r1, r2
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	4798      	blx	r3
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	4798      	blx	r3
  }

  return USBD_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ac8:	6839      	ldr	r1, [r7, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 ff2c 	bl	8005928 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004ade:	461a      	mov	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d00e      	beq.n	8004b12 <USBD_LL_SetupStage+0x5a>
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d302      	bcc.n	8004afe <USBD_LL_SetupStage+0x46>
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d014      	beq.n	8004b26 <USBD_LL_SetupStage+0x6e>
 8004afc:	e01d      	b.n	8004b3a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b04:	4619      	mov	r1, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fa18 	bl	8004f3c <USBD_StdDevReq>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b10:	e020      	b.n	8004b54 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fa7c 	bl	8005018 <USBD_StdItfReq>
 8004b20:	4603      	mov	r3, r0
 8004b22:	73fb      	strb	r3, [r7, #15]
      break;
 8004b24:	e016      	b.n	8004b54 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fab8 	bl	80050a4 <USBD_StdEPReq>
 8004b34:	4603      	mov	r3, r0
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	e00c      	b.n	8004b54 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004b40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	4619      	mov	r1, r3
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f001 fc0f 	bl	800636c <USBD_LL_StallEP>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	73fb      	strb	r3, [r7, #15]
      break;
 8004b52:	bf00      	nop
  }

  return ret;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b086      	sub	sp, #24
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	460b      	mov	r3, r1
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004b6c:	7afb      	ldrb	r3, [r7, #11]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d137      	bne.n	8004be2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004b78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d14a      	bne.n	8004c1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d913      	bls.n	8004bb8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	1ad2      	subs	r2, r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	bf28      	it	cs
 8004baa:	4613      	movcs	r3, r2
 8004bac:	461a      	mov	r2, r3
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 ffad 	bl	8005b10 <USBD_CtlContinueRx>
 8004bb6:	e030      	b.n	8004c1a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d105      	bne.n	8004bda <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 ffa9 	bl	8005b32 <USBD_CtlSendStatus>
 8004be0:	e01b      	b.n	8004c1a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d013      	beq.n	8004c16 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d10e      	bne.n	8004c16 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	7afa      	ldrb	r2, [r7, #11]
 8004c02:	4611      	mov	r1, r2
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	4798      	blx	r3
 8004c08:	4603      	mov	r3, r0
 8004c0a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
 8004c14:	e002      	b.n	8004c1c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e000      	b.n	8004c1c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004c32:	7afb      	ldrb	r3, [r7, #11]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d16a      	bne.n	8004d0e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3314      	adds	r3, #20
 8004c3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d155      	bne.n	8004cf4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d914      	bls.n	8004c7e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	1ad2      	subs	r2, r2, r3
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	461a      	mov	r2, r3
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 ff22 	bl	8005ab4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c70:	2300      	movs	r3, #0
 8004c72:	2200      	movs	r2, #0
 8004c74:	2100      	movs	r1, #0
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f001 fc22 	bl	80064c0 <USBD_LL_PrepareReceive>
 8004c7c:	e03a      	b.n	8004cf4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d11c      	bne.n	8004cc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d316      	bcc.n	8004cc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d20f      	bcs.n	8004cc4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 ff03 	bl	8005ab4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2100      	movs	r1, #0
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f001 fbff 	bl	80064c0 <USBD_LL_PrepareReceive>
 8004cc2:	e017      	b.n	8004cf4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d105      	bne.n	8004ce6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ce6:	2180      	movs	r1, #128	; 0x80
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f001 fb3f 	bl	800636c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 ff32 	bl	8005b58 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d123      	bne.n	8004d46 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff fe9b 	bl	8004a3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004d0c:	e01b      	b.n	8004d46 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d013      	beq.n	8004d42 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d10e      	bne.n	8004d42 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	7afa      	ldrb	r2, [r7, #11]
 8004d2e:	4611      	mov	r1, r2
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	4798      	blx	r3
 8004d34:	4603      	mov	r3, r0
 8004d36:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
 8004d40:	e002      	b.n	8004d48 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e000      	b.n	8004d48 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d009      	beq.n	8004d94 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6852      	ldr	r2, [r2, #4]
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	4611      	mov	r1, r2
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d94:	2340      	movs	r3, #64	; 0x40
 8004d96:	2200      	movs	r2, #0
 8004d98:	2100      	movs	r1, #0
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f001 faa1 	bl	80062e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2240      	movs	r2, #64	; 0x40
 8004dac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004db0:	2340      	movs	r3, #64	; 0x40
 8004db2:	2200      	movs	r2, #0
 8004db4:	2180      	movs	r1, #128	; 0x80
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f001 fa93 	bl	80062e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2240      	movs	r2, #64	; 0x40
 8004dc6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2204      	movs	r2, #4
 8004e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d105      	bne.n	8004e3a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d10b      	bne.n	8004e72 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d009      	beq.n	8004ef4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6852      	ldr	r2, [r2, #4]
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	4611      	mov	r1, r2
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
  }

  return USBD_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b087      	sub	sp, #28
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	3301      	adds	r3, #1
 8004f14:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004f1c:	8a3b      	ldrh	r3, [r7, #16]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	b21a      	sxth	r2, r3
 8004f22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	b21b      	sxth	r3, r3
 8004f2a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004f2c:	89fb      	ldrh	r3, [r7, #14]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d004      	beq.n	8004f60 <USBD_StdDevReq+0x24>
 8004f56:	2b40      	cmp	r3, #64	; 0x40
 8004f58:	d002      	beq.n	8004f60 <USBD_StdDevReq+0x24>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <USBD_StdDevReq+0x38>
 8004f5e:	e050      	b.n	8005002 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	4798      	blx	r3
 8004f6e:	4603      	mov	r3, r0
 8004f70:	73fb      	strb	r3, [r7, #15]
    break;
 8004f72:	e04b      	b.n	800500c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	2b09      	cmp	r3, #9
 8004f7a:	d83c      	bhi.n	8004ff6 <USBD_StdDevReq+0xba>
 8004f7c:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <USBD_StdDevReq+0x48>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004fd9 	.word	0x08004fd9
 8004f88:	08004fed 	.word	0x08004fed
 8004f8c:	08004ff7 	.word	0x08004ff7
 8004f90:	08004fe3 	.word	0x08004fe3
 8004f94:	08004ff7 	.word	0x08004ff7
 8004f98:	08004fb7 	.word	0x08004fb7
 8004f9c:	08004fad 	.word	0x08004fad
 8004fa0:	08004ff7 	.word	0x08004ff7
 8004fa4:	08004fcf 	.word	0x08004fcf
 8004fa8:	08004fc1 	.word	0x08004fc1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f9ce 	bl	8005350 <USBD_GetDescriptor>
      break;
 8004fb4:	e024      	b.n	8005000 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fb33 	bl	8005624 <USBD_SetAddress>
      break;
 8004fbe:	e01f      	b.n	8005000 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fb70 	bl	80056a8 <USBD_SetConfig>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	73fb      	strb	r3, [r7, #15]
      break;
 8004fcc:	e018      	b.n	8005000 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fc0d 	bl	80057f0 <USBD_GetConfig>
      break;
 8004fd6:	e013      	b.n	8005000 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fc3c 	bl	8005858 <USBD_GetStatus>
      break;
 8004fe0:	e00e      	b.n	8005000 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8004fe2:	6839      	ldr	r1, [r7, #0]
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fc6a 	bl	80058be <USBD_SetFeature>
      break;
 8004fea:	e009      	b.n	8005000 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fc79 	bl	80058e6 <USBD_ClrFeature>
      break;
 8004ff4:	e004      	b.n	8005000 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8004ff6:	6839      	ldr	r1, [r7, #0]
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fccf 	bl	800599c <USBD_CtlError>
      break;
 8004ffe:	bf00      	nop
    }
    break;
 8005000:	e004      	b.n	800500c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fcc9 	bl	800599c <USBD_CtlError>
    break;
 800500a:	bf00      	nop
  }

  return ret;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop

08005018 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800502e:	2b20      	cmp	r3, #32
 8005030:	d003      	beq.n	800503a <USBD_StdItfReq+0x22>
 8005032:	2b40      	cmp	r3, #64	; 0x40
 8005034:	d001      	beq.n	800503a <USBD_StdItfReq+0x22>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d12a      	bne.n	8005090 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005040:	3b01      	subs	r3, #1
 8005042:	2b02      	cmp	r3, #2
 8005044:	d81d      	bhi.n	8005082 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	889b      	ldrh	r3, [r3, #4]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d813      	bhi.n	8005078 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
 800505e:	4603      	mov	r3, r0
 8005060:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	88db      	ldrh	r3, [r3, #6]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d110      	bne.n	800508c <USBD_StdItfReq+0x74>
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10d      	bne.n	800508c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fd5e 	bl	8005b32 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005076:	e009      	b.n	800508c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005078:	6839      	ldr	r1, [r7, #0]
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fc8e 	bl	800599c <USBD_CtlError>
      break;
 8005080:	e004      	b.n	800508c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fc89 	bl	800599c <USBD_CtlError>
      break;
 800508a:	e000      	b.n	800508e <USBD_StdItfReq+0x76>
      break;
 800508c:	bf00      	nop
    }
    break;
 800508e:	e004      	b.n	800509a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fc82 	bl	800599c <USBD_CtlError>
    break;
 8005098:	bf00      	nop
  }

  return ret;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	889b      	ldrh	r3, [r3, #4]
 80050b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d004      	beq.n	80050ce <USBD_StdEPReq+0x2a>
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d002      	beq.n	80050ce <USBD_StdEPReq+0x2a>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <USBD_StdEPReq+0x3e>
 80050cc:	e135      	b.n	800533a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	6839      	ldr	r1, [r7, #0]
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
 80050dc:	4603      	mov	r3, r0
 80050de:	73fb      	strb	r3, [r7, #15]
    break;
 80050e0:	e130      	b.n	8005344 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d03e      	beq.n	8005168 <USBD_StdEPReq+0xc4>
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d002      	beq.n	80050f4 <USBD_StdEPReq+0x50>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d077      	beq.n	80051e2 <USBD_StdEPReq+0x13e>
 80050f2:	e11c      	b.n	800532e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d002      	beq.n	8005104 <USBD_StdEPReq+0x60>
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d015      	beq.n	800512e <USBD_StdEPReq+0x8a>
 8005102:	e02b      	b.n	800515c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005104:	7bbb      	ldrb	r3, [r7, #14]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <USBD_StdEPReq+0x80>
 800510a:	7bbb      	ldrb	r3, [r7, #14]
 800510c:	2b80      	cmp	r3, #128	; 0x80
 800510e:	d009      	beq.n	8005124 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005110:	7bbb      	ldrb	r3, [r7, #14]
 8005112:	4619      	mov	r1, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f001 f929 	bl	800636c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800511a:	2180      	movs	r1, #128	; 0x80
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f001 f925 	bl	800636c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005122:	e020      	b.n	8005166 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fc38 	bl	800599c <USBD_CtlError>
        break;
 800512c:	e01b      	b.n	8005166 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	885b      	ldrh	r3, [r3, #2]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10e      	bne.n	8005154 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005136:	7bbb      	ldrb	r3, [r7, #14]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <USBD_StdEPReq+0xb0>
 800513c:	7bbb      	ldrb	r3, [r7, #14]
 800513e:	2b80      	cmp	r3, #128	; 0x80
 8005140:	d008      	beq.n	8005154 <USBD_StdEPReq+0xb0>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	88db      	ldrh	r3, [r3, #6]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d104      	bne.n	8005154 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800514a:	7bbb      	ldrb	r3, [r7, #14]
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f001 f90c 	bl	800636c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fcec 	bl	8005b32 <USBD_CtlSendStatus>

        break;
 800515a:	e004      	b.n	8005166 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800515c:	6839      	ldr	r1, [r7, #0]
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fc1c 	bl	800599c <USBD_CtlError>
        break;
 8005164:	bf00      	nop
      }
      break;
 8005166:	e0e7      	b.n	8005338 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800516e:	2b02      	cmp	r3, #2
 8005170:	d002      	beq.n	8005178 <USBD_StdEPReq+0xd4>
 8005172:	2b03      	cmp	r3, #3
 8005174:	d015      	beq.n	80051a2 <USBD_StdEPReq+0xfe>
 8005176:	e02d      	b.n	80051d4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005178:	7bbb      	ldrb	r3, [r7, #14]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <USBD_StdEPReq+0xf4>
 800517e:	7bbb      	ldrb	r3, [r7, #14]
 8005180:	2b80      	cmp	r3, #128	; 0x80
 8005182:	d009      	beq.n	8005198 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f001 f8ef 	bl	800636c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f001 f8eb 	bl	800636c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005196:	e023      	b.n	80051e0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005198:	6839      	ldr	r1, [r7, #0]
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fbfe 	bl	800599c <USBD_CtlError>
        break;
 80051a0:	e01e      	b.n	80051e0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	885b      	ldrh	r3, [r3, #2]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d119      	bne.n	80051de <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80051aa:	7bbb      	ldrb	r3, [r7, #14]
 80051ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f001 f8f6 	bl	80063aa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fcb7 	bl	8005b32 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	4798      	blx	r3
        }
        break;
 80051d2:	e004      	b.n	80051de <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fbe0 	bl	800599c <USBD_CtlError>
        break;
 80051dc:	e000      	b.n	80051e0 <USBD_StdEPReq+0x13c>
        break;
 80051de:	bf00      	nop
      }
      break;
 80051e0:	e0aa      	b.n	8005338 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d002      	beq.n	80051f2 <USBD_StdEPReq+0x14e>
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d032      	beq.n	8005256 <USBD_StdEPReq+0x1b2>
 80051f0:	e097      	b.n	8005322 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051f2:	7bbb      	ldrb	r3, [r7, #14]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <USBD_StdEPReq+0x164>
 80051f8:	7bbb      	ldrb	r3, [r7, #14]
 80051fa:	2b80      	cmp	r3, #128	; 0x80
 80051fc:	d004      	beq.n	8005208 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fbcb 	bl	800599c <USBD_CtlError>
          break;
 8005206:	e091      	b.n	800532c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800520c:	2b00      	cmp	r3, #0
 800520e:	da0b      	bge.n	8005228 <USBD_StdEPReq+0x184>
 8005210:	7bbb      	ldrb	r3, [r7, #14]
 8005212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	3310      	adds	r3, #16
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	4413      	add	r3, r2
 8005224:	3304      	adds	r3, #4
 8005226:	e00b      	b.n	8005240 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005228:	7bbb      	ldrb	r3, [r7, #14]
 800522a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	3304      	adds	r3, #4
 8005240:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2202      	movs	r2, #2
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fc15 	bl	8005a7e <USBD_CtlSendData>
        break;
 8005254:	e06a      	b.n	800532c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800525a:	2b00      	cmp	r3, #0
 800525c:	da11      	bge.n	8005282 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800525e:	7bbb      	ldrb	r3, [r7, #14]
 8005260:	f003 020f 	and.w	r2, r3, #15
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3324      	adds	r3, #36	; 0x24
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d117      	bne.n	80052a8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fb8e 	bl	800599c <USBD_CtlError>
            break;
 8005280:	e054      	b.n	800532c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005282:	7bbb      	ldrb	r3, [r7, #14]
 8005284:	f003 020f 	and.w	r2, r3, #15
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d104      	bne.n	80052a8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800529e:	6839      	ldr	r1, [r7, #0]
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fb7b 	bl	800599c <USBD_CtlError>
            break;
 80052a6:	e041      	b.n	800532c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	da0b      	bge.n	80052c8 <USBD_StdEPReq+0x224>
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	3310      	adds	r3, #16
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	4413      	add	r3, r2
 80052c4:	3304      	adds	r3, #4
 80052c6:	e00b      	b.n	80052e0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80052c8:	7bbb      	ldrb	r3, [r7, #14]
 80052ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	3304      	adds	r3, #4
 80052e0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <USBD_StdEPReq+0x24a>
 80052e8:	7bbb      	ldrb	r3, [r7, #14]
 80052ea:	2b80      	cmp	r3, #128	; 0x80
 80052ec:	d103      	bne.n	80052f6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e00e      	b.n	8005314 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80052f6:	7bbb      	ldrb	r3, [r7, #14]
 80052f8:	4619      	mov	r1, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f001 f874 	bl	80063e8 <USBD_LL_IsStallEP>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2201      	movs	r2, #1
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	e002      	b.n	8005314 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2202      	movs	r2, #2
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fbaf 	bl	8005a7e <USBD_CtlSendData>
          break;
 8005320:	e004      	b.n	800532c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fb39 	bl	800599c <USBD_CtlError>
        break;
 800532a:	bf00      	nop
      }
      break;
 800532c:	e004      	b.n	8005338 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fb33 	bl	800599c <USBD_CtlError>
      break;
 8005336:	bf00      	nop
    }
    break;
 8005338:	e004      	b.n	8005344 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fb2d 	bl	800599c <USBD_CtlError>
    break;
 8005342:	bf00      	nop
  }

  return ret;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	885b      	ldrh	r3, [r3, #2]
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	2b06      	cmp	r3, #6
 8005372:	f200 8128 	bhi.w	80055c6 <USBD_GetDescriptor+0x276>
 8005376:	a201      	add	r2, pc, #4	; (adr r2, 800537c <USBD_GetDescriptor+0x2c>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	08005399 	.word	0x08005399
 8005380:	080053b1 	.word	0x080053b1
 8005384:	080053f1 	.word	0x080053f1
 8005388:	080055c7 	.word	0x080055c7
 800538c:	080055c7 	.word	0x080055c7
 8005390:	08005567 	.word	0x08005567
 8005394:	08005593 	.word	0x08005593
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	7c12      	ldrb	r2, [r2, #16]
 80053a4:	f107 0108 	add.w	r1, r7, #8
 80053a8:	4610      	mov	r0, r2
 80053aa:	4798      	blx	r3
 80053ac:	60f8      	str	r0, [r7, #12]
    break;
 80053ae:	e112      	b.n	80055d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7c1b      	ldrb	r3, [r3, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10d      	bne.n	80053d4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	f107 0208 	add.w	r2, r7, #8
 80053c4:	4610      	mov	r0, r2
 80053c6:	4798      	blx	r3
 80053c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	2202      	movs	r2, #2
 80053d0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80053d2:	e100      	b.n	80055d6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	f107 0208 	add.w	r2, r7, #8
 80053e0:	4610      	mov	r0, r2
 80053e2:	4798      	blx	r3
 80053e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3301      	adds	r3, #1
 80053ea:	2202      	movs	r2, #2
 80053ec:	701a      	strb	r2, [r3, #0]
    break;
 80053ee:	e0f2      	b.n	80055d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	885b      	ldrh	r3, [r3, #2]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	f200 80ac 	bhi.w	8005554 <USBD_GetDescriptor+0x204>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <USBD_GetDescriptor+0xb4>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	0800541d 	.word	0x0800541d
 8005408:	08005451 	.word	0x08005451
 800540c:	08005485 	.word	0x08005485
 8005410:	080054b9 	.word	0x080054b9
 8005414:	080054ed 	.word	0x080054ed
 8005418:	08005521 	.word	0x08005521
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00b      	beq.n	8005440 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	7c12      	ldrb	r2, [r2, #16]
 8005434:	f107 0108 	add.w	r1, r7, #8
 8005438:	4610      	mov	r0, r2
 800543a:	4798      	blx	r3
 800543c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800543e:	e091      	b.n	8005564 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 faaa 	bl	800599c <USBD_CtlError>
        err++;
 8005448:	7afb      	ldrb	r3, [r7, #11]
 800544a:	3301      	adds	r3, #1
 800544c:	72fb      	strb	r3, [r7, #11]
      break;
 800544e:	e089      	b.n	8005564 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	7c12      	ldrb	r2, [r2, #16]
 8005468:	f107 0108 	add.w	r1, r7, #8
 800546c:	4610      	mov	r0, r2
 800546e:	4798      	blx	r3
 8005470:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005472:	e077      	b.n	8005564 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fa90 	bl	800599c <USBD_CtlError>
        err++;
 800547c:	7afb      	ldrb	r3, [r7, #11]
 800547e:	3301      	adds	r3, #1
 8005480:	72fb      	strb	r3, [r7, #11]
      break;
 8005482:	e06f      	b.n	8005564 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00b      	beq.n	80054a8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	7c12      	ldrb	r2, [r2, #16]
 800549c:	f107 0108 	add.w	r1, r7, #8
 80054a0:	4610      	mov	r0, r2
 80054a2:	4798      	blx	r3
 80054a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80054a6:	e05d      	b.n	8005564 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fa76 	bl	800599c <USBD_CtlError>
        err++;
 80054b0:	7afb      	ldrb	r3, [r7, #11]
 80054b2:	3301      	adds	r3, #1
 80054b4:	72fb      	strb	r3, [r7, #11]
      break;
 80054b6:	e055      	b.n	8005564 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00b      	beq.n	80054dc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	7c12      	ldrb	r2, [r2, #16]
 80054d0:	f107 0108 	add.w	r1, r7, #8
 80054d4:	4610      	mov	r0, r2
 80054d6:	4798      	blx	r3
 80054d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80054da:	e043      	b.n	8005564 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa5c 	bl	800599c <USBD_CtlError>
        err++;
 80054e4:	7afb      	ldrb	r3, [r7, #11]
 80054e6:	3301      	adds	r3, #1
 80054e8:	72fb      	strb	r3, [r7, #11]
      break;
 80054ea:	e03b      	b.n	8005564 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	7c12      	ldrb	r2, [r2, #16]
 8005504:	f107 0108 	add.w	r1, r7, #8
 8005508:	4610      	mov	r0, r2
 800550a:	4798      	blx	r3
 800550c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800550e:	e029      	b.n	8005564 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa42 	bl	800599c <USBD_CtlError>
        err++;
 8005518:	7afb      	ldrb	r3, [r7, #11]
 800551a:	3301      	adds	r3, #1
 800551c:	72fb      	strb	r3, [r7, #11]
      break;
 800551e:	e021      	b.n	8005564 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00b      	beq.n	8005544 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	7c12      	ldrb	r2, [r2, #16]
 8005538:	f107 0108 	add.w	r1, r7, #8
 800553c:	4610      	mov	r0, r2
 800553e:	4798      	blx	r3
 8005540:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005542:	e00f      	b.n	8005564 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa28 	bl	800599c <USBD_CtlError>
        err++;
 800554c:	7afb      	ldrb	r3, [r7, #11]
 800554e:	3301      	adds	r3, #1
 8005550:	72fb      	strb	r3, [r7, #11]
      break;
 8005552:	e007      	b.n	8005564 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fa20 	bl	800599c <USBD_CtlError>
      err++;
 800555c:	7afb      	ldrb	r3, [r7, #11]
 800555e:	3301      	adds	r3, #1
 8005560:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005562:	bf00      	nop
    }
    break;
 8005564:	e037      	b.n	80055d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	7c1b      	ldrb	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d109      	bne.n	8005582 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005576:	f107 0208 	add.w	r2, r7, #8
 800557a:	4610      	mov	r0, r2
 800557c:	4798      	blx	r3
 800557e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005580:	e029      	b.n	80055d6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fa09 	bl	800599c <USBD_CtlError>
      err++;
 800558a:	7afb      	ldrb	r3, [r7, #11]
 800558c:	3301      	adds	r3, #1
 800558e:	72fb      	strb	r3, [r7, #11]
    break;
 8005590:	e021      	b.n	80055d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	7c1b      	ldrb	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10d      	bne.n	80055b6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f107 0208 	add.w	r2, r7, #8
 80055a6:	4610      	mov	r0, r2
 80055a8:	4798      	blx	r3
 80055aa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3301      	adds	r3, #1
 80055b0:	2207      	movs	r2, #7
 80055b2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80055b4:	e00f      	b.n	80055d6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80055b6:	6839      	ldr	r1, [r7, #0]
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f9ef 	bl	800599c <USBD_CtlError>
      err++;
 80055be:	7afb      	ldrb	r3, [r7, #11]
 80055c0:	3301      	adds	r3, #1
 80055c2:	72fb      	strb	r3, [r7, #11]
    break;
 80055c4:	e007      	b.n	80055d6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f9e7 	bl	800599c <USBD_CtlError>
    err++;
 80055ce:	7afb      	ldrb	r3, [r7, #11]
 80055d0:	3301      	adds	r3, #1
 80055d2:	72fb      	strb	r3, [r7, #11]
    break;
 80055d4:	bf00      	nop
  }

  if (err != 0U)
 80055d6:	7afb      	ldrb	r3, [r7, #11]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d11e      	bne.n	800561a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	88db      	ldrh	r3, [r3, #6]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d016      	beq.n	8005612 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80055e4:	893b      	ldrh	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00e      	beq.n	8005608 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	88da      	ldrh	r2, [r3, #6]
 80055ee:	893b      	ldrh	r3, [r7, #8]
 80055f0:	4293      	cmp	r3, r2
 80055f2:	bf28      	it	cs
 80055f4:	4613      	movcs	r3, r2
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80055fa:	893b      	ldrh	r3, [r7, #8]
 80055fc:	461a      	mov	r2, r3
 80055fe:	68f9      	ldr	r1, [r7, #12]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fa3c 	bl	8005a7e <USBD_CtlSendData>
 8005606:	e009      	b.n	800561c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9c6 	bl	800599c <USBD_CtlError>
 8005610:	e004      	b.n	800561c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fa8d 	bl	8005b32 <USBD_CtlSendStatus>
 8005618:	e000      	b.n	800561c <USBD_GetDescriptor+0x2cc>
    return;
 800561a:	bf00      	nop
    }
  }
}
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop

08005624 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	889b      	ldrh	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d130      	bne.n	8005698 <USBD_SetAddress+0x74>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	88db      	ldrh	r3, [r3, #6]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d12c      	bne.n	8005698 <USBD_SetAddress+0x74>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	885b      	ldrh	r3, [r3, #2]
 8005642:	2b7f      	cmp	r3, #127	; 0x7f
 8005644:	d828      	bhi.n	8005698 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	885b      	ldrh	r3, [r3, #2]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005650:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005658:	2b03      	cmp	r3, #3
 800565a:	d104      	bne.n	8005666 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f99c 	bl	800599c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005664:	e01c      	b.n	80056a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	7bfa      	ldrb	r2, [r7, #15]
 800566a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800566e:	7bfb      	ldrb	r3, [r7, #15]
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fee4 	bl	8006440 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fa5a 	bl	8005b32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800568c:	e008      	b.n	80056a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005696:	e003      	b.n	80056a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f97e 	bl	800599c <USBD_CtlError>
  }
}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	885b      	ldrh	r3, [r3, #2]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	4b4b      	ldr	r3, [pc, #300]	; (80057ec <USBD_SetConfig+0x144>)
 80056be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80056c0:	4b4a      	ldr	r3, [pc, #296]	; (80057ec <USBD_SetConfig+0x144>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d905      	bls.n	80056d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f966 	bl	800599c <USBD_CtlError>
    return USBD_FAIL;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e087      	b.n	80057e4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d002      	beq.n	80056e4 <USBD_SetConfig+0x3c>
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d025      	beq.n	800572e <USBD_SetConfig+0x86>
 80056e2:	e071      	b.n	80057c8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80056e4:	4b41      	ldr	r3, [pc, #260]	; (80057ec <USBD_SetConfig+0x144>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01c      	beq.n	8005726 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80056ec:	4b3f      	ldr	r3, [pc, #252]	; (80057ec <USBD_SetConfig+0x144>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80056f6:	4b3d      	ldr	r3, [pc, #244]	; (80057ec <USBD_SetConfig+0x144>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff f9a7 	bl	8004a50 <USBD_SetClassConfig>
 8005702:	4603      	mov	r3, r0
 8005704:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800570c:	6839      	ldr	r1, [r7, #0]
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f944 	bl	800599c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005714:	e065      	b.n	80057e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fa0b 	bl	8005b32 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2203      	movs	r2, #3
 8005720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005724:	e05d      	b.n	80057e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fa03 	bl	8005b32 <USBD_CtlSendStatus>
    break;
 800572c:	e059      	b.n	80057e2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800572e:	4b2f      	ldr	r3, [pc, #188]	; (80057ec <USBD_SetConfig+0x144>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d112      	bne.n	800575c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2202      	movs	r2, #2
 800573a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800573e:	4b2b      	ldr	r3, [pc, #172]	; (80057ec <USBD_SetConfig+0x144>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005748:	4b28      	ldr	r3, [pc, #160]	; (80057ec <USBD_SetConfig+0x144>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff f99a 	bl	8004a88 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f9ec 	bl	8005b32 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800575a:	e042      	b.n	80057e2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800575c:	4b23      	ldr	r3, [pc, #140]	; (80057ec <USBD_SetConfig+0x144>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d02a      	beq.n	80057c0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff f988 	bl	8004a88 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005778:	4b1c      	ldr	r3, [pc, #112]	; (80057ec <USBD_SetConfig+0x144>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005782:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <USBD_SetConfig+0x144>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff f961 	bl	8004a50 <USBD_SetClassConfig>
 800578e:	4603      	mov	r3, r0
 8005790:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00f      	beq.n	80057b8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f8fe 	bl	800599c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff f96d 	bl	8004a88 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80057b6:	e014      	b.n	80057e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f9ba 	bl	8005b32 <USBD_CtlSendStatus>
    break;
 80057be:	e010      	b.n	80057e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f9b6 	bl	8005b32 <USBD_CtlSendStatus>
    break;
 80057c6:	e00c      	b.n	80057e2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f8e6 	bl	800599c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <USBD_SetConfig+0x144>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff f956 	bl	8004a88 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80057dc:	2303      	movs	r3, #3
 80057de:	73fb      	strb	r3, [r7, #15]
    break;
 80057e0:	bf00      	nop
  }

  return ret;
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000204 	.word	0x20000204

080057f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	88db      	ldrh	r3, [r3, #6]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d004      	beq.n	800580c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f8c9 	bl	800599c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800580a:	e021      	b.n	8005850 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005812:	2b01      	cmp	r3, #1
 8005814:	db17      	blt.n	8005846 <USBD_GetConfig+0x56>
 8005816:	2b02      	cmp	r3, #2
 8005818:	dd02      	ble.n	8005820 <USBD_GetConfig+0x30>
 800581a:	2b03      	cmp	r3, #3
 800581c:	d00b      	beq.n	8005836 <USBD_GetConfig+0x46>
 800581e:	e012      	b.n	8005846 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3308      	adds	r3, #8
 800582a:	2201      	movs	r2, #1
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f925 	bl	8005a7e <USBD_CtlSendData>
      break;
 8005834:	e00c      	b.n	8005850 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3304      	adds	r3, #4
 800583a:	2201      	movs	r2, #1
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f91d 	bl	8005a7e <USBD_CtlSendData>
      break;
 8005844:	e004      	b.n	8005850 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f8a7 	bl	800599c <USBD_CtlError>
      break;
 800584e:	bf00      	nop
}
 8005850:	bf00      	nop
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005868:	3b01      	subs	r3, #1
 800586a:	2b02      	cmp	r3, #2
 800586c:	d81e      	bhi.n	80058ac <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	88db      	ldrh	r3, [r3, #6]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d004      	beq.n	8005880 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f88f 	bl	800599c <USBD_CtlError>
      break;
 800587e:	e01a      	b.n	80058b6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f043 0202 	orr.w	r2, r3, #2
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	330c      	adds	r3, #12
 80058a0:	2202      	movs	r2, #2
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f8ea 	bl	8005a7e <USBD_CtlSendData>
    break;
 80058aa:	e004      	b.n	80058b6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f874 	bl	800599c <USBD_CtlError>
    break;
 80058b4:	bf00      	nop
  }
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	885b      	ldrh	r3, [r3, #2]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d106      	bne.n	80058de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f92a 	bl	8005b32 <USBD_CtlSendStatus>
  }
}
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f6:	3b01      	subs	r3, #1
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d80b      	bhi.n	8005914 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	885b      	ldrh	r3, [r3, #2]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d10c      	bne.n	800591e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f910 	bl	8005b32 <USBD_CtlSendStatus>
      }
      break;
 8005912:	e004      	b.n	800591e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f840 	bl	800599c <USBD_CtlError>
      break;
 800591c:	e000      	b.n	8005920 <USBD_ClrFeature+0x3a>
      break;
 800591e:	bf00      	nop
  }
}
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3301      	adds	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	781a      	ldrb	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3301      	adds	r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff fad3 	bl	8004efe <SWAPBYTE>
 8005958:	4603      	mov	r3, r0
 800595a:	461a      	mov	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3301      	adds	r3, #1
 8005964:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f7ff fac6 	bl	8004efe <SWAPBYTE>
 8005972:	4603      	mov	r3, r0
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3301      	adds	r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff fab9 	bl	8004efe <SWAPBYTE>
 800598c:	4603      	mov	r3, r0
 800598e:	461a      	mov	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	80da      	strh	r2, [r3, #6]
}
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80059a6:	2180      	movs	r1, #128	; 0x80
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fcdf 	bl	800636c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80059ae:	2100      	movs	r1, #0
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fcdb 	bl	800636c <USBD_LL_StallEP>
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b086      	sub	sp, #24
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d036      	beq.n	8005a42 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80059d8:	6938      	ldr	r0, [r7, #16]
 80059da:	f000 f836 	bl	8005a4a <USBD_GetLen>
 80059de:	4603      	mov	r3, r0
 80059e0:	3301      	adds	r3, #1
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	4413      	add	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	7812      	ldrb	r2, [r2, #0]
 80059f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
 80059fa:	3301      	adds	r3, #1
 80059fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	4413      	add	r3, r2
 8005a04:	2203      	movs	r2, #3
 8005a06:	701a      	strb	r2, [r3, #0]
  idx++;
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005a0e:	e013      	b.n	8005a38 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	4413      	add	r3, r2
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	7812      	ldrb	r2, [r2, #0]
 8005a1a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	613b      	str	r3, [r7, #16]
    idx++;
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
 8005a24:	3301      	adds	r3, #1
 8005a26:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
    idx++;
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
 8005a34:	3301      	adds	r3, #1
 8005a36:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e7      	bne.n	8005a10 <USBD_GetString+0x52>
 8005a40:	e000      	b.n	8005a44 <USBD_GetString+0x86>
    return;
 8005a42:	bf00      	nop
  }
}
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005a5a:	e005      	b.n	8005a68 <USBD_GetLen+0x1e>
  {
    len++;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	3301      	adds	r3, #1
 8005a66:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1f5      	bne.n	8005a5c <USBD_GetLen+0x12>
  }

  return len;
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 fcea 	bl	800647e <USBD_LL_Transmit>

  return USBD_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fcd9 	bl	800647e <USBD_LL_Transmit>

  return USBD_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	2100      	movs	r1, #0
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fcdd 	bl	80064c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	2100      	movs	r1, #0
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fccc 	bl	80064c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b082      	sub	sp, #8
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005b42:	2300      	movs	r3, #0
 8005b44:	2200      	movs	r2, #0
 8005b46:	2100      	movs	r1, #0
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fc98 	bl	800647e <USBD_LL_Transmit>

  return USBD_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2205      	movs	r2, #5
 8005b64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b68:	2300      	movs	r3, #0
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fca6 	bl	80064c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005b84:	2200      	movs	r2, #0
 8005b86:	4912      	ldr	r1, [pc, #72]	; (8005bd0 <MX_USB_DEVICE_Init+0x50>)
 8005b88:	4812      	ldr	r0, [pc, #72]	; (8005bd4 <MX_USB_DEVICE_Init+0x54>)
 8005b8a:	f7fe fef3 	bl	8004974 <USBD_Init>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005b94:	f7fa fe2c 	bl	80007f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005b98:	490f      	ldr	r1, [pc, #60]	; (8005bd8 <MX_USB_DEVICE_Init+0x58>)
 8005b9a:	480e      	ldr	r0, [pc, #56]	; (8005bd4 <MX_USB_DEVICE_Init+0x54>)
 8005b9c:	f7fe ff20 	bl	80049e0 <USBD_RegisterClass>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005ba6:	f7fa fe23 	bl	80007f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005baa:	490c      	ldr	r1, [pc, #48]	; (8005bdc <MX_USB_DEVICE_Init+0x5c>)
 8005bac:	4809      	ldr	r0, [pc, #36]	; (8005bd4 <MX_USB_DEVICE_Init+0x54>)
 8005bae:	f7fe fe45 	bl	800483c <USBD_CDC_RegisterInterface>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005bb8:	f7fa fe1a 	bl	80007f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005bbc:	4805      	ldr	r0, [pc, #20]	; (8005bd4 <MX_USB_DEVICE_Init+0x54>)
 8005bbe:	f7fe ff30 	bl	8004a22 <USBD_Start>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005bc8:	f7fa fe12 	bl	80007f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005bcc:	bf00      	nop
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20000130 	.word	0x20000130
 8005bd4:	2000026c 	.word	0x2000026c
 8005bd8:	20000018 	.word	0x20000018
 8005bdc:	2000011c 	.word	0x2000011c

08005be0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005be4:	2200      	movs	r2, #0
 8005be6:	4905      	ldr	r1, [pc, #20]	; (8005bfc <CDC_Init_FS+0x1c>)
 8005be8:	4805      	ldr	r0, [pc, #20]	; (8005c00 <CDC_Init_FS+0x20>)
 8005bea:	f7fe fe3c 	bl	8004866 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005bee:	4905      	ldr	r1, [pc, #20]	; (8005c04 <CDC_Init_FS+0x24>)
 8005bf0:	4803      	ldr	r0, [pc, #12]	; (8005c00 <CDC_Init_FS+0x20>)
 8005bf2:	f7fe fe51 	bl	8004898 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005bf6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	20000d3c 	.word	0x20000d3c
 8005c00:	2000026c 	.word	0x2000026c
 8005c04:	2000053c 	.word	0x2000053c

08005c08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005c0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	6039      	str	r1, [r7, #0]
 8005c22:	71fb      	strb	r3, [r7, #7]
 8005c24:	4613      	mov	r3, r2
 8005c26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	2b23      	cmp	r3, #35	; 0x23
 8005c2c:	d84a      	bhi.n	8005cc4 <CDC_Control_FS+0xac>
 8005c2e:	a201      	add	r2, pc, #4	; (adr r2, 8005c34 <CDC_Control_FS+0x1c>)
 8005c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c34:	08005cc5 	.word	0x08005cc5
 8005c38:	08005cc5 	.word	0x08005cc5
 8005c3c:	08005cc5 	.word	0x08005cc5
 8005c40:	08005cc5 	.word	0x08005cc5
 8005c44:	08005cc5 	.word	0x08005cc5
 8005c48:	08005cc5 	.word	0x08005cc5
 8005c4c:	08005cc5 	.word	0x08005cc5
 8005c50:	08005cc5 	.word	0x08005cc5
 8005c54:	08005cc5 	.word	0x08005cc5
 8005c58:	08005cc5 	.word	0x08005cc5
 8005c5c:	08005cc5 	.word	0x08005cc5
 8005c60:	08005cc5 	.word	0x08005cc5
 8005c64:	08005cc5 	.word	0x08005cc5
 8005c68:	08005cc5 	.word	0x08005cc5
 8005c6c:	08005cc5 	.word	0x08005cc5
 8005c70:	08005cc5 	.word	0x08005cc5
 8005c74:	08005cc5 	.word	0x08005cc5
 8005c78:	08005cc5 	.word	0x08005cc5
 8005c7c:	08005cc5 	.word	0x08005cc5
 8005c80:	08005cc5 	.word	0x08005cc5
 8005c84:	08005cc5 	.word	0x08005cc5
 8005c88:	08005cc5 	.word	0x08005cc5
 8005c8c:	08005cc5 	.word	0x08005cc5
 8005c90:	08005cc5 	.word	0x08005cc5
 8005c94:	08005cc5 	.word	0x08005cc5
 8005c98:	08005cc5 	.word	0x08005cc5
 8005c9c:	08005cc5 	.word	0x08005cc5
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005cc5 	.word	0x08005cc5
 8005ca8:	08005cc5 	.word	0x08005cc5
 8005cac:	08005cc5 	.word	0x08005cc5
 8005cb0:	08005cc5 	.word	0x08005cc5
 8005cb4:	08005cc5 	.word	0x08005cc5
 8005cb8:	08005cc5 	.word	0x08005cc5
 8005cbc:	08005cc5 	.word	0x08005cc5
 8005cc0:	08005cc5 	.word	0x08005cc5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005cc4:	bf00      	nop
  }

  return (USBD_OK);
 8005cc6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	4805      	ldr	r0, [pc, #20]	; (8005cf8 <CDC_Receive_FS+0x24>)
 8005ce2:	f7fe fdd9 	bl	8004898 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005ce6:	4804      	ldr	r0, [pc, #16]	; (8005cf8 <CDC_Receive_FS+0x24>)
 8005ce8:	f7fe fe1a 	bl	8004920 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005cec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	2000026c 	.word	0x2000026c

08005cfc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d0c:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <CDC_Transmit_FS+0x48>)
 8005d0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e00b      	b.n	8005d3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005d22:	887b      	ldrh	r3, [r7, #2]
 8005d24:	461a      	mov	r2, r3
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	4806      	ldr	r0, [pc, #24]	; (8005d44 <CDC_Transmit_FS+0x48>)
 8005d2a:	f7fe fd9c 	bl	8004866 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005d2e:	4805      	ldr	r0, [pc, #20]	; (8005d44 <CDC_Transmit_FS+0x48>)
 8005d30:	f7fe fdc6 	bl	80048c0 <USBD_CDC_TransmitPacket>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	2000026c 	.word	0x2000026c

08005d48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
	...

08005d6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	4603      	mov	r3, r0
 8005d74:	6039      	str	r1, [r7, #0]
 8005d76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2212      	movs	r2, #18
 8005d7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005d7e:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	2000014c 	.word	0x2000014c

08005d90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	4603      	mov	r3, r0
 8005d98:	6039      	str	r1, [r7, #0]
 8005d9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2204      	movs	r2, #4
 8005da0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005da2:	4b03      	ldr	r3, [pc, #12]	; (8005db0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	20000160 	.word	0x20000160

08005db4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	6039      	str	r1, [r7, #0]
 8005dbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d105      	bne.n	8005dd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	4907      	ldr	r1, [pc, #28]	; (8005de8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005dca:	4808      	ldr	r0, [pc, #32]	; (8005dec <USBD_FS_ProductStrDescriptor+0x38>)
 8005dcc:	f7ff fdf7 	bl	80059be <USBD_GetString>
 8005dd0:	e004      	b.n	8005ddc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	4904      	ldr	r1, [pc, #16]	; (8005de8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005dd6:	4805      	ldr	r0, [pc, #20]	; (8005dec <USBD_FS_ProductStrDescriptor+0x38>)
 8005dd8:	f7ff fdf1 	bl	80059be <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ddc:	4b02      	ldr	r3, [pc, #8]	; (8005de8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	2000153c 	.word	0x2000153c
 8005dec:	08006e30 	.word	0x08006e30

08005df0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	6039      	str	r1, [r7, #0]
 8005dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	4904      	ldr	r1, [pc, #16]	; (8005e10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005e00:	4804      	ldr	r0, [pc, #16]	; (8005e14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005e02:	f7ff fddc 	bl	80059be <USBD_GetString>
  return USBD_StrDesc;
 8005e06:	4b02      	ldr	r3, [pc, #8]	; (8005e10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	2000153c 	.word	0x2000153c
 8005e14:	08006e48 	.word	0x08006e48

08005e18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	6039      	str	r1, [r7, #0]
 8005e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	221a      	movs	r2, #26
 8005e28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005e2a:	f000 f843 	bl	8005eb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005e2e:	4b02      	ldr	r3, [pc, #8]	; (8005e38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000164 	.word	0x20000164

08005e3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	6039      	str	r1, [r7, #0]
 8005e46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d105      	bne.n	8005e5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	4907      	ldr	r1, [pc, #28]	; (8005e70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e52:	4808      	ldr	r0, [pc, #32]	; (8005e74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e54:	f7ff fdb3 	bl	80059be <USBD_GetString>
 8005e58:	e004      	b.n	8005e64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	4904      	ldr	r1, [pc, #16]	; (8005e70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e5e:	4805      	ldr	r0, [pc, #20]	; (8005e74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e60:	f7ff fdad 	bl	80059be <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e64:	4b02      	ldr	r3, [pc, #8]	; (8005e70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	2000153c 	.word	0x2000153c
 8005e74:	08006e5c 	.word	0x08006e5c

08005e78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	6039      	str	r1, [r7, #0]
 8005e82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d105      	bne.n	8005e96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	4907      	ldr	r1, [pc, #28]	; (8005eac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e8e:	4808      	ldr	r0, [pc, #32]	; (8005eb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e90:	f7ff fd95 	bl	80059be <USBD_GetString>
 8005e94:	e004      	b.n	8005ea0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	4904      	ldr	r1, [pc, #16]	; (8005eac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e9a:	4805      	ldr	r0, [pc, #20]	; (8005eb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e9c:	f7ff fd8f 	bl	80059be <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ea0:	4b02      	ldr	r3, [pc, #8]	; (8005eac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	2000153c 	.word	0x2000153c
 8005eb0:	08006e68 	.word	0x08006e68

08005eb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005eba:	4b0f      	ldr	r3, [pc, #60]	; (8005ef8 <Get_SerialNum+0x44>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005ec0:	4b0e      	ldr	r3, [pc, #56]	; (8005efc <Get_SerialNum+0x48>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005ec6:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <Get_SerialNum+0x4c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005eda:	2208      	movs	r2, #8
 8005edc:	4909      	ldr	r1, [pc, #36]	; (8005f04 <Get_SerialNum+0x50>)
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f814 	bl	8005f0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	4908      	ldr	r1, [pc, #32]	; (8005f08 <Get_SerialNum+0x54>)
 8005ee8:	68b8      	ldr	r0, [r7, #8]
 8005eea:	f000 f80f 	bl	8005f0c <IntToUnicode>
  }
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	1fff7a10 	.word	0x1fff7a10
 8005efc:	1fff7a14 	.word	0x1fff7a14
 8005f00:	1fff7a18 	.word	0x1fff7a18
 8005f04:	20000166 	.word	0x20000166
 8005f08:	20000176 	.word	0x20000176

08005f0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005f1e:	2300      	movs	r3, #0
 8005f20:	75fb      	strb	r3, [r7, #23]
 8005f22:	e027      	b.n	8005f74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	0f1b      	lsrs	r3, r3, #28
 8005f28:	2b09      	cmp	r3, #9
 8005f2a:	d80b      	bhi.n	8005f44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	0f1b      	lsrs	r3, r3, #28
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	4619      	mov	r1, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	440b      	add	r3, r1
 8005f3c:	3230      	adds	r2, #48	; 0x30
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	e00a      	b.n	8005f5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	0f1b      	lsrs	r3, r3, #28
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	4619      	mov	r1, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	440b      	add	r3, r1
 8005f54:	3237      	adds	r2, #55	; 0x37
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	3301      	adds	r3, #1
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	4413      	add	r3, r2
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f6e:	7dfb      	ldrb	r3, [r7, #23]
 8005f70:	3301      	adds	r3, #1
 8005f72:	75fb      	strb	r3, [r7, #23]
 8005f74:	7dfa      	ldrb	r2, [r7, #23]
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d3d3      	bcc.n	8005f24 <IntToUnicode+0x18>
  }
}
 8005f7c:	bf00      	nop
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f90:	f107 0314 	add.w	r3, r7, #20
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
 8005f9c:	60da      	str	r2, [r3, #12]
 8005f9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fa8:	d13a      	bne.n	8006020 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	4b1e      	ldr	r3, [pc, #120]	; (8006028 <HAL_PCD_MspInit+0xa0>)
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	4a1d      	ldr	r2, [pc, #116]	; (8006028 <HAL_PCD_MspInit+0xa0>)
 8005fb4:	f043 0301 	orr.w	r3, r3, #1
 8005fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8005fba:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <HAL_PCD_MspInit+0xa0>)
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005fc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005fd8:	230a      	movs	r3, #10
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fdc:	f107 0314 	add.w	r3, r7, #20
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4812      	ldr	r0, [pc, #72]	; (800602c <HAL_PCD_MspInit+0xa4>)
 8005fe4:	f7fa fec8 	bl	8000d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <HAL_PCD_MspInit+0xa0>)
 8005fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fec:	4a0e      	ldr	r2, [pc, #56]	; (8006028 <HAL_PCD_MspInit+0xa0>)
 8005fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff2:	6353      	str	r3, [r2, #52]	; 0x34
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <HAL_PCD_MspInit+0xa0>)
 8005ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffc:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <HAL_PCD_MspInit+0xa0>)
 8005ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006002:	6453      	str	r3, [r2, #68]	; 0x44
 8006004:	4b08      	ldr	r3, [pc, #32]	; (8006028 <HAL_PCD_MspInit+0xa0>)
 8006006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006010:	2200      	movs	r2, #0
 8006012:	2100      	movs	r1, #0
 8006014:	2043      	movs	r0, #67	; 0x43
 8006016:	f7fa fe78 	bl	8000d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800601a:	2043      	movs	r0, #67	; 0x43
 800601c:	f7fa fe91 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006020:	bf00      	nop
 8006022:	3728      	adds	r7, #40	; 0x28
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	40023800 	.word	0x40023800
 800602c:	40020000 	.word	0x40020000

08006030 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f7fe fd36 	bl	8004ab8 <USBD_LL_SetupStage>
}
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006066:	78fa      	ldrb	r2, [r7, #3]
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	4613      	mov	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	4619      	mov	r1, r3
 800607e:	f7fe fd6e 	bl	8004b5e <USBD_LL_DataOutStage>
}
 8006082:	bf00      	nop
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800609c:	78fa      	ldrb	r2, [r7, #3]
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	3348      	adds	r3, #72	; 0x48
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	4619      	mov	r1, r3
 80060b2:	f7fe fdb7 	bl	8004c24 <USBD_LL_DataInStage>
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fe febb 	bl	8004e48 <USBD_LL_SOF>
}
 80060d2:	bf00      	nop
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80060ee:	2300      	movs	r3, #0
 80060f0:	73fb      	strb	r3, [r7, #15]
 80060f2:	e008      	b.n	8006106 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d102      	bne.n	8006102 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80060fc:	2301      	movs	r3, #1
 80060fe:	73fb      	strb	r3, [r7, #15]
 8006100:	e001      	b.n	8006106 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006102:	f7fa fb75 	bl	80007f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800610c:	7bfa      	ldrb	r2, [r7, #15]
 800610e:	4611      	mov	r1, r2
 8006110:	4618      	mov	r0, r3
 8006112:	f7fe fe5e 	bl	8004dd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe fe17 	bl	8004d50 <USBD_LL_Reset>
}
 8006122:	bf00      	nop
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe fe59 	bl	8004df2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6812      	ldr	r2, [r2, #0]
 800614e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006160:	4b04      	ldr	r3, [pc, #16]	; (8006174 <HAL_PCD_SuspendCallback+0x48>)
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	4a03      	ldr	r2, [pc, #12]	; (8006174 <HAL_PCD_SuspendCallback+0x48>)
 8006166:	f043 0306 	orr.w	r3, r3, #6
 800616a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800616c:	bf00      	nop
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	e000ed00 	.word	0xe000ed00

08006178 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe fe48 	bl	8004e1c <USBD_LL_Resume>
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061a6:	78fa      	ldrb	r2, [r7, #3]
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe fe73 	bl	8004e96 <USBD_LL_IsoOUTIncomplete>
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	4611      	mov	r1, r2
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe fe54 	bl	8004e7c <USBD_LL_IsoINIncomplete>
}
 80061d4:	bf00      	nop
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fe60 	bl	8004eb0 <USBD_LL_DevConnected>
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe fe5d 	bl	8004ec6 <USBD_LL_DevDisconnected>
}
 800620c:	bf00      	nop
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d13c      	bne.n	800629e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006224:	4a20      	ldr	r2, [pc, #128]	; (80062a8 <USBD_LL_Init+0x94>)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a1e      	ldr	r2, [pc, #120]	; (80062a8 <USBD_LL_Init+0x94>)
 8006230:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006234:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <USBD_LL_Init+0x94>)
 8006236:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800623a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800623c:	4b1a      	ldr	r3, [pc, #104]	; (80062a8 <USBD_LL_Init+0x94>)
 800623e:	2204      	movs	r2, #4
 8006240:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006242:	4b19      	ldr	r3, [pc, #100]	; (80062a8 <USBD_LL_Init+0x94>)
 8006244:	2202      	movs	r2, #2
 8006246:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006248:	4b17      	ldr	r3, [pc, #92]	; (80062a8 <USBD_LL_Init+0x94>)
 800624a:	2200      	movs	r2, #0
 800624c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800624e:	4b16      	ldr	r3, [pc, #88]	; (80062a8 <USBD_LL_Init+0x94>)
 8006250:	2202      	movs	r2, #2
 8006252:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006254:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <USBD_LL_Init+0x94>)
 8006256:	2200      	movs	r2, #0
 8006258:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800625a:	4b13      	ldr	r3, [pc, #76]	; (80062a8 <USBD_LL_Init+0x94>)
 800625c:	2200      	movs	r2, #0
 800625e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006260:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <USBD_LL_Init+0x94>)
 8006262:	2200      	movs	r2, #0
 8006264:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006266:	4b10      	ldr	r3, [pc, #64]	; (80062a8 <USBD_LL_Init+0x94>)
 8006268:	2200      	movs	r2, #0
 800626a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800626c:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <USBD_LL_Init+0x94>)
 800626e:	2200      	movs	r2, #0
 8006270:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006272:	480d      	ldr	r0, [pc, #52]	; (80062a8 <USBD_LL_Init+0x94>)
 8006274:	f7fa ff33 	bl	80010de <HAL_PCD_Init>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800627e:	f7fa fab7 	bl	80007f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006282:	2180      	movs	r1, #128	; 0x80
 8006284:	4808      	ldr	r0, [pc, #32]	; (80062a8 <USBD_LL_Init+0x94>)
 8006286:	f7fc f890 	bl	80023aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800628a:	2240      	movs	r2, #64	; 0x40
 800628c:	2100      	movs	r1, #0
 800628e:	4806      	ldr	r0, [pc, #24]	; (80062a8 <USBD_LL_Init+0x94>)
 8006290:	f7fc f844 	bl	800231c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006294:	2280      	movs	r2, #128	; 0x80
 8006296:	2101      	movs	r1, #1
 8006298:	4803      	ldr	r0, [pc, #12]	; (80062a8 <USBD_LL_Init+0x94>)
 800629a:	f7fc f83f 	bl	800231c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	2000173c 	.word	0x2000173c

080062ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fb f828 	bl	8001318 <HAL_PCD_Start>
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 f92a 	bl	8006528 <USBD_Get_USB_Status>
 80062d4:	4603      	mov	r3, r0
 80062d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	4608      	mov	r0, r1
 80062ec:	4611      	mov	r1, r2
 80062ee:	461a      	mov	r2, r3
 80062f0:	4603      	mov	r3, r0
 80062f2:	70fb      	strb	r3, [r7, #3]
 80062f4:	460b      	mov	r3, r1
 80062f6:	70bb      	strb	r3, [r7, #2]
 80062f8:	4613      	mov	r3, r2
 80062fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800630a:	78bb      	ldrb	r3, [r7, #2]
 800630c:	883a      	ldrh	r2, [r7, #0]
 800630e:	78f9      	ldrb	r1, [r7, #3]
 8006310:	f7fb fc0c 	bl	8001b2c <HAL_PCD_EP_Open>
 8006314:	4603      	mov	r3, r0
 8006316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f904 	bl	8006528 <USBD_Get_USB_Status>
 8006320:	4603      	mov	r3, r0
 8006322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006324:	7bbb      	ldrb	r3, [r7, #14]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006348:	78fa      	ldrb	r2, [r7, #3]
 800634a:	4611      	mov	r1, r2
 800634c:	4618      	mov	r0, r3
 800634e:	f7fb fc55 	bl	8001bfc <HAL_PCD_EP_Close>
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	4618      	mov	r0, r3
 800635a:	f000 f8e5 	bl	8006528 <USBD_Get_USB_Status>
 800635e:	4603      	mov	r3, r0
 8006360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006362:	7bbb      	ldrb	r3, [r7, #14]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006386:	78fa      	ldrb	r2, [r7, #3]
 8006388:	4611      	mov	r1, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f7fb fd2d 	bl	8001dea <HAL_PCD_EP_SetStall>
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 f8c6 	bl	8006528 <USBD_Get_USB_Status>
 800639c:	4603      	mov	r3, r0
 800639e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	460b      	mov	r3, r1
 80063b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063c4:	78fa      	ldrb	r2, [r7, #3]
 80063c6:	4611      	mov	r1, r2
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fb fd72 	bl	8001eb2 <HAL_PCD_EP_ClrStall>
 80063ce:	4603      	mov	r3, r0
 80063d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 f8a7 	bl	8006528 <USBD_Get_USB_Status>
 80063da:	4603      	mov	r3, r0
 80063dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063de:	7bbb      	ldrb	r3, [r7, #14]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80063fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006400:	2b00      	cmp	r3, #0
 8006402:	da0b      	bge.n	800641c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	4613      	mov	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	1a9b      	subs	r3, r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	333e      	adds	r3, #62	; 0x3e
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	e00b      	b.n	8006434 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	4613      	mov	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006432:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	4611      	mov	r1, r2
 800645e:	4618      	mov	r0, r3
 8006460:	f7fb fb3f 	bl	8001ae2 <HAL_PCD_SetAddress>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 f85c 	bl	8006528 <USBD_Get_USB_Status>
 8006470:	4603      	mov	r3, r0
 8006472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006474:	7bbb      	ldrb	r3, [r7, #14]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b086      	sub	sp, #24
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
 800648a:	460b      	mov	r3, r1
 800648c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800649c:	7af9      	ldrb	r1, [r7, #11]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	f7fb fc58 	bl	8001d56 <HAL_PCD_EP_Transmit>
 80064a6:	4603      	mov	r3, r0
 80064a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 f83b 	bl	8006528 <USBD_Get_USB_Status>
 80064b2:	4603      	mov	r3, r0
 80064b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80064b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	460b      	mov	r3, r1
 80064ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80064de:	7af9      	ldrb	r1, [r7, #11]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	f7fb fbd4 	bl	8001c90 <HAL_PCD_EP_Receive>
 80064e8:	4603      	mov	r3, r0
 80064ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ec:	7dfb      	ldrb	r3, [r7, #23]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 f81a 	bl	8006528 <USBD_Get_USB_Status>
 80064f4:	4603      	mov	r3, r0
 80064f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80064f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	460b      	mov	r3, r1
 800650c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	4611      	mov	r1, r2
 8006518:	4618      	mov	r0, r3
 800651a:	f7fb fc04 	bl	8001d26 <HAL_PCD_EP_GetRxCount>
 800651e:	4603      	mov	r3, r0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d817      	bhi.n	800656c <USBD_Get_USB_Status+0x44>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <USBD_Get_USB_Status+0x1c>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	08006555 	.word	0x08006555
 8006548:	0800655b 	.word	0x0800655b
 800654c:	08006561 	.word	0x08006561
 8006550:	08006567 	.word	0x08006567
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
    break;
 8006558:	e00b      	b.n	8006572 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800655a:	2303      	movs	r3, #3
 800655c:	73fb      	strb	r3, [r7, #15]
    break;
 800655e:	e008      	b.n	8006572 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006560:	2301      	movs	r3, #1
 8006562:	73fb      	strb	r3, [r7, #15]
    break;
 8006564:	e005      	b.n	8006572 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006566:	2303      	movs	r3, #3
 8006568:	73fb      	strb	r3, [r7, #15]
    break;
 800656a:	e002      	b.n	8006572 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800656c:	2303      	movs	r3, #3
 800656e:	73fb      	strb	r3, [r7, #15]
    break;
 8006570:	bf00      	nop
  }
  return usb_status;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <__errno>:
 8006580:	4b01      	ldr	r3, [pc, #4]	; (8006588 <__errno+0x8>)
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20000180 	.word	0x20000180

0800658c <__libc_init_array>:
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	4e0d      	ldr	r6, [pc, #52]	; (80065c4 <__libc_init_array+0x38>)
 8006590:	4c0d      	ldr	r4, [pc, #52]	; (80065c8 <__libc_init_array+0x3c>)
 8006592:	1ba4      	subs	r4, r4, r6
 8006594:	10a4      	asrs	r4, r4, #2
 8006596:	2500      	movs	r5, #0
 8006598:	42a5      	cmp	r5, r4
 800659a:	d109      	bne.n	80065b0 <__libc_init_array+0x24>
 800659c:	4e0b      	ldr	r6, [pc, #44]	; (80065cc <__libc_init_array+0x40>)
 800659e:	4c0c      	ldr	r4, [pc, #48]	; (80065d0 <__libc_init_array+0x44>)
 80065a0:	f000 fc36 	bl	8006e10 <_init>
 80065a4:	1ba4      	subs	r4, r4, r6
 80065a6:	10a4      	asrs	r4, r4, #2
 80065a8:	2500      	movs	r5, #0
 80065aa:	42a5      	cmp	r5, r4
 80065ac:	d105      	bne.n	80065ba <__libc_init_array+0x2e>
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065b4:	4798      	blx	r3
 80065b6:	3501      	adds	r5, #1
 80065b8:	e7ee      	b.n	8006598 <__libc_init_array+0xc>
 80065ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065be:	4798      	blx	r3
 80065c0:	3501      	adds	r5, #1
 80065c2:	e7f2      	b.n	80065aa <__libc_init_array+0x1e>
 80065c4:	08006ec4 	.word	0x08006ec4
 80065c8:	08006ec4 	.word	0x08006ec4
 80065cc:	08006ec4 	.word	0x08006ec4
 80065d0:	08006ec8 	.word	0x08006ec8

080065d4 <malloc>:
 80065d4:	4b02      	ldr	r3, [pc, #8]	; (80065e0 <malloc+0xc>)
 80065d6:	4601      	mov	r1, r0
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	f000 b861 	b.w	80066a0 <_malloc_r>
 80065de:	bf00      	nop
 80065e0:	20000180 	.word	0x20000180

080065e4 <free>:
 80065e4:	4b02      	ldr	r3, [pc, #8]	; (80065f0 <free+0xc>)
 80065e6:	4601      	mov	r1, r0
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	f000 b80b 	b.w	8006604 <_free_r>
 80065ee:	bf00      	nop
 80065f0:	20000180 	.word	0x20000180

080065f4 <memset>:
 80065f4:	4402      	add	r2, r0
 80065f6:	4603      	mov	r3, r0
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d100      	bne.n	80065fe <memset+0xa>
 80065fc:	4770      	bx	lr
 80065fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006602:	e7f9      	b.n	80065f8 <memset+0x4>

08006604 <_free_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4605      	mov	r5, r0
 8006608:	2900      	cmp	r1, #0
 800660a:	d045      	beq.n	8006698 <_free_r+0x94>
 800660c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006610:	1f0c      	subs	r4, r1, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfb8      	it	lt
 8006616:	18e4      	addlt	r4, r4, r3
 8006618:	f000 f8cc 	bl	80067b4 <__malloc_lock>
 800661c:	4a1f      	ldr	r2, [pc, #124]	; (800669c <_free_r+0x98>)
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	4610      	mov	r0, r2
 8006622:	b933      	cbnz	r3, 8006632 <_free_r+0x2e>
 8006624:	6063      	str	r3, [r4, #4]
 8006626:	6014      	str	r4, [r2, #0]
 8006628:	4628      	mov	r0, r5
 800662a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800662e:	f000 b8c2 	b.w	80067b6 <__malloc_unlock>
 8006632:	42a3      	cmp	r3, r4
 8006634:	d90c      	bls.n	8006650 <_free_r+0x4c>
 8006636:	6821      	ldr	r1, [r4, #0]
 8006638:	1862      	adds	r2, r4, r1
 800663a:	4293      	cmp	r3, r2
 800663c:	bf04      	itt	eq
 800663e:	681a      	ldreq	r2, [r3, #0]
 8006640:	685b      	ldreq	r3, [r3, #4]
 8006642:	6063      	str	r3, [r4, #4]
 8006644:	bf04      	itt	eq
 8006646:	1852      	addeq	r2, r2, r1
 8006648:	6022      	streq	r2, [r4, #0]
 800664a:	6004      	str	r4, [r0, #0]
 800664c:	e7ec      	b.n	8006628 <_free_r+0x24>
 800664e:	4613      	mov	r3, r2
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	b10a      	cbz	r2, 8006658 <_free_r+0x54>
 8006654:	42a2      	cmp	r2, r4
 8006656:	d9fa      	bls.n	800664e <_free_r+0x4a>
 8006658:	6819      	ldr	r1, [r3, #0]
 800665a:	1858      	adds	r0, r3, r1
 800665c:	42a0      	cmp	r0, r4
 800665e:	d10b      	bne.n	8006678 <_free_r+0x74>
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	4401      	add	r1, r0
 8006664:	1858      	adds	r0, r3, r1
 8006666:	4282      	cmp	r2, r0
 8006668:	6019      	str	r1, [r3, #0]
 800666a:	d1dd      	bne.n	8006628 <_free_r+0x24>
 800666c:	6810      	ldr	r0, [r2, #0]
 800666e:	6852      	ldr	r2, [r2, #4]
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	4401      	add	r1, r0
 8006674:	6019      	str	r1, [r3, #0]
 8006676:	e7d7      	b.n	8006628 <_free_r+0x24>
 8006678:	d902      	bls.n	8006680 <_free_r+0x7c>
 800667a:	230c      	movs	r3, #12
 800667c:	602b      	str	r3, [r5, #0]
 800667e:	e7d3      	b.n	8006628 <_free_r+0x24>
 8006680:	6820      	ldr	r0, [r4, #0]
 8006682:	1821      	adds	r1, r4, r0
 8006684:	428a      	cmp	r2, r1
 8006686:	bf04      	itt	eq
 8006688:	6811      	ldreq	r1, [r2, #0]
 800668a:	6852      	ldreq	r2, [r2, #4]
 800668c:	6062      	str	r2, [r4, #4]
 800668e:	bf04      	itt	eq
 8006690:	1809      	addeq	r1, r1, r0
 8006692:	6021      	streq	r1, [r4, #0]
 8006694:	605c      	str	r4, [r3, #4]
 8006696:	e7c7      	b.n	8006628 <_free_r+0x24>
 8006698:	bd38      	pop	{r3, r4, r5, pc}
 800669a:	bf00      	nop
 800669c:	20000208 	.word	0x20000208

080066a0 <_malloc_r>:
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	1ccd      	adds	r5, r1, #3
 80066a4:	f025 0503 	bic.w	r5, r5, #3
 80066a8:	3508      	adds	r5, #8
 80066aa:	2d0c      	cmp	r5, #12
 80066ac:	bf38      	it	cc
 80066ae:	250c      	movcc	r5, #12
 80066b0:	2d00      	cmp	r5, #0
 80066b2:	4606      	mov	r6, r0
 80066b4:	db01      	blt.n	80066ba <_malloc_r+0x1a>
 80066b6:	42a9      	cmp	r1, r5
 80066b8:	d903      	bls.n	80066c2 <_malloc_r+0x22>
 80066ba:	230c      	movs	r3, #12
 80066bc:	6033      	str	r3, [r6, #0]
 80066be:	2000      	movs	r0, #0
 80066c0:	bd70      	pop	{r4, r5, r6, pc}
 80066c2:	f000 f877 	bl	80067b4 <__malloc_lock>
 80066c6:	4a21      	ldr	r2, [pc, #132]	; (800674c <_malloc_r+0xac>)
 80066c8:	6814      	ldr	r4, [r2, #0]
 80066ca:	4621      	mov	r1, r4
 80066cc:	b991      	cbnz	r1, 80066f4 <_malloc_r+0x54>
 80066ce:	4c20      	ldr	r4, [pc, #128]	; (8006750 <_malloc_r+0xb0>)
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	b91b      	cbnz	r3, 80066dc <_malloc_r+0x3c>
 80066d4:	4630      	mov	r0, r6
 80066d6:	f000 f83d 	bl	8006754 <_sbrk_r>
 80066da:	6020      	str	r0, [r4, #0]
 80066dc:	4629      	mov	r1, r5
 80066de:	4630      	mov	r0, r6
 80066e0:	f000 f838 	bl	8006754 <_sbrk_r>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d124      	bne.n	8006732 <_malloc_r+0x92>
 80066e8:	230c      	movs	r3, #12
 80066ea:	6033      	str	r3, [r6, #0]
 80066ec:	4630      	mov	r0, r6
 80066ee:	f000 f862 	bl	80067b6 <__malloc_unlock>
 80066f2:	e7e4      	b.n	80066be <_malloc_r+0x1e>
 80066f4:	680b      	ldr	r3, [r1, #0]
 80066f6:	1b5b      	subs	r3, r3, r5
 80066f8:	d418      	bmi.n	800672c <_malloc_r+0x8c>
 80066fa:	2b0b      	cmp	r3, #11
 80066fc:	d90f      	bls.n	800671e <_malloc_r+0x7e>
 80066fe:	600b      	str	r3, [r1, #0]
 8006700:	50cd      	str	r5, [r1, r3]
 8006702:	18cc      	adds	r4, r1, r3
 8006704:	4630      	mov	r0, r6
 8006706:	f000 f856 	bl	80067b6 <__malloc_unlock>
 800670a:	f104 000b 	add.w	r0, r4, #11
 800670e:	1d23      	adds	r3, r4, #4
 8006710:	f020 0007 	bic.w	r0, r0, #7
 8006714:	1ac3      	subs	r3, r0, r3
 8006716:	d0d3      	beq.n	80066c0 <_malloc_r+0x20>
 8006718:	425a      	negs	r2, r3
 800671a:	50e2      	str	r2, [r4, r3]
 800671c:	e7d0      	b.n	80066c0 <_malloc_r+0x20>
 800671e:	428c      	cmp	r4, r1
 8006720:	684b      	ldr	r3, [r1, #4]
 8006722:	bf16      	itet	ne
 8006724:	6063      	strne	r3, [r4, #4]
 8006726:	6013      	streq	r3, [r2, #0]
 8006728:	460c      	movne	r4, r1
 800672a:	e7eb      	b.n	8006704 <_malloc_r+0x64>
 800672c:	460c      	mov	r4, r1
 800672e:	6849      	ldr	r1, [r1, #4]
 8006730:	e7cc      	b.n	80066cc <_malloc_r+0x2c>
 8006732:	1cc4      	adds	r4, r0, #3
 8006734:	f024 0403 	bic.w	r4, r4, #3
 8006738:	42a0      	cmp	r0, r4
 800673a:	d005      	beq.n	8006748 <_malloc_r+0xa8>
 800673c:	1a21      	subs	r1, r4, r0
 800673e:	4630      	mov	r0, r6
 8006740:	f000 f808 	bl	8006754 <_sbrk_r>
 8006744:	3001      	adds	r0, #1
 8006746:	d0cf      	beq.n	80066e8 <_malloc_r+0x48>
 8006748:	6025      	str	r5, [r4, #0]
 800674a:	e7db      	b.n	8006704 <_malloc_r+0x64>
 800674c:	20000208 	.word	0x20000208
 8006750:	2000020c 	.word	0x2000020c

08006754 <_sbrk_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4c06      	ldr	r4, [pc, #24]	; (8006770 <_sbrk_r+0x1c>)
 8006758:	2300      	movs	r3, #0
 800675a:	4605      	mov	r5, r0
 800675c:	4608      	mov	r0, r1
 800675e:	6023      	str	r3, [r4, #0]
 8006760:	f7fa f8ee 	bl	8000940 <_sbrk>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_sbrk_r+0x1a>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	b103      	cbz	r3, 800676e <_sbrk_r+0x1a>
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	20001b44 	.word	0x20001b44

08006774 <siprintf>:
 8006774:	b40e      	push	{r1, r2, r3}
 8006776:	b500      	push	{lr}
 8006778:	b09c      	sub	sp, #112	; 0x70
 800677a:	ab1d      	add	r3, sp, #116	; 0x74
 800677c:	9002      	str	r0, [sp, #8]
 800677e:	9006      	str	r0, [sp, #24]
 8006780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006784:	4809      	ldr	r0, [pc, #36]	; (80067ac <siprintf+0x38>)
 8006786:	9107      	str	r1, [sp, #28]
 8006788:	9104      	str	r1, [sp, #16]
 800678a:	4909      	ldr	r1, [pc, #36]	; (80067b0 <siprintf+0x3c>)
 800678c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006790:	9105      	str	r1, [sp, #20]
 8006792:	6800      	ldr	r0, [r0, #0]
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	a902      	add	r1, sp, #8
 8006798:	f000 f868 	bl	800686c <_svfiprintf_r>
 800679c:	9b02      	ldr	r3, [sp, #8]
 800679e:	2200      	movs	r2, #0
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	b01c      	add	sp, #112	; 0x70
 80067a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067a8:	b003      	add	sp, #12
 80067aa:	4770      	bx	lr
 80067ac:	20000180 	.word	0x20000180
 80067b0:	ffff0208 	.word	0xffff0208

080067b4 <__malloc_lock>:
 80067b4:	4770      	bx	lr

080067b6 <__malloc_unlock>:
 80067b6:	4770      	bx	lr

080067b8 <__ssputs_r>:
 80067b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	688e      	ldr	r6, [r1, #8]
 80067be:	429e      	cmp	r6, r3
 80067c0:	4682      	mov	sl, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	4690      	mov	r8, r2
 80067c6:	4699      	mov	r9, r3
 80067c8:	d837      	bhi.n	800683a <__ssputs_r+0x82>
 80067ca:	898a      	ldrh	r2, [r1, #12]
 80067cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067d0:	d031      	beq.n	8006836 <__ssputs_r+0x7e>
 80067d2:	6825      	ldr	r5, [r4, #0]
 80067d4:	6909      	ldr	r1, [r1, #16]
 80067d6:	1a6f      	subs	r7, r5, r1
 80067d8:	6965      	ldr	r5, [r4, #20]
 80067da:	2302      	movs	r3, #2
 80067dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80067e4:	f109 0301 	add.w	r3, r9, #1
 80067e8:	443b      	add	r3, r7
 80067ea:	429d      	cmp	r5, r3
 80067ec:	bf38      	it	cc
 80067ee:	461d      	movcc	r5, r3
 80067f0:	0553      	lsls	r3, r2, #21
 80067f2:	d530      	bpl.n	8006856 <__ssputs_r+0x9e>
 80067f4:	4629      	mov	r1, r5
 80067f6:	f7ff ff53 	bl	80066a0 <_malloc_r>
 80067fa:	4606      	mov	r6, r0
 80067fc:	b950      	cbnz	r0, 8006814 <__ssputs_r+0x5c>
 80067fe:	230c      	movs	r3, #12
 8006800:	f8ca 3000 	str.w	r3, [sl]
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006814:	463a      	mov	r2, r7
 8006816:	6921      	ldr	r1, [r4, #16]
 8006818:	f000 faa8 	bl	8006d6c <memcpy>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	6126      	str	r6, [r4, #16]
 800682a:	6165      	str	r5, [r4, #20]
 800682c:	443e      	add	r6, r7
 800682e:	1bed      	subs	r5, r5, r7
 8006830:	6026      	str	r6, [r4, #0]
 8006832:	60a5      	str	r5, [r4, #8]
 8006834:	464e      	mov	r6, r9
 8006836:	454e      	cmp	r6, r9
 8006838:	d900      	bls.n	800683c <__ssputs_r+0x84>
 800683a:	464e      	mov	r6, r9
 800683c:	4632      	mov	r2, r6
 800683e:	4641      	mov	r1, r8
 8006840:	6820      	ldr	r0, [r4, #0]
 8006842:	f000 fa9e 	bl	8006d82 <memmove>
 8006846:	68a3      	ldr	r3, [r4, #8]
 8006848:	1b9b      	subs	r3, r3, r6
 800684a:	60a3      	str	r3, [r4, #8]
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	441e      	add	r6, r3
 8006850:	6026      	str	r6, [r4, #0]
 8006852:	2000      	movs	r0, #0
 8006854:	e7dc      	b.n	8006810 <__ssputs_r+0x58>
 8006856:	462a      	mov	r2, r5
 8006858:	f000 faac 	bl	8006db4 <_realloc_r>
 800685c:	4606      	mov	r6, r0
 800685e:	2800      	cmp	r0, #0
 8006860:	d1e2      	bne.n	8006828 <__ssputs_r+0x70>
 8006862:	6921      	ldr	r1, [r4, #16]
 8006864:	4650      	mov	r0, sl
 8006866:	f7ff fecd 	bl	8006604 <_free_r>
 800686a:	e7c8      	b.n	80067fe <__ssputs_r+0x46>

0800686c <_svfiprintf_r>:
 800686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006870:	461d      	mov	r5, r3
 8006872:	898b      	ldrh	r3, [r1, #12]
 8006874:	061f      	lsls	r7, r3, #24
 8006876:	b09d      	sub	sp, #116	; 0x74
 8006878:	4680      	mov	r8, r0
 800687a:	460c      	mov	r4, r1
 800687c:	4616      	mov	r6, r2
 800687e:	d50f      	bpl.n	80068a0 <_svfiprintf_r+0x34>
 8006880:	690b      	ldr	r3, [r1, #16]
 8006882:	b96b      	cbnz	r3, 80068a0 <_svfiprintf_r+0x34>
 8006884:	2140      	movs	r1, #64	; 0x40
 8006886:	f7ff ff0b 	bl	80066a0 <_malloc_r>
 800688a:	6020      	str	r0, [r4, #0]
 800688c:	6120      	str	r0, [r4, #16]
 800688e:	b928      	cbnz	r0, 800689c <_svfiprintf_r+0x30>
 8006890:	230c      	movs	r3, #12
 8006892:	f8c8 3000 	str.w	r3, [r8]
 8006896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800689a:	e0c8      	b.n	8006a2e <_svfiprintf_r+0x1c2>
 800689c:	2340      	movs	r3, #64	; 0x40
 800689e:	6163      	str	r3, [r4, #20]
 80068a0:	2300      	movs	r3, #0
 80068a2:	9309      	str	r3, [sp, #36]	; 0x24
 80068a4:	2320      	movs	r3, #32
 80068a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068aa:	2330      	movs	r3, #48	; 0x30
 80068ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068b0:	9503      	str	r5, [sp, #12]
 80068b2:	f04f 0b01 	mov.w	fp, #1
 80068b6:	4637      	mov	r7, r6
 80068b8:	463d      	mov	r5, r7
 80068ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80068be:	b10b      	cbz	r3, 80068c4 <_svfiprintf_r+0x58>
 80068c0:	2b25      	cmp	r3, #37	; 0x25
 80068c2:	d13e      	bne.n	8006942 <_svfiprintf_r+0xd6>
 80068c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80068c8:	d00b      	beq.n	80068e2 <_svfiprintf_r+0x76>
 80068ca:	4653      	mov	r3, sl
 80068cc:	4632      	mov	r2, r6
 80068ce:	4621      	mov	r1, r4
 80068d0:	4640      	mov	r0, r8
 80068d2:	f7ff ff71 	bl	80067b8 <__ssputs_r>
 80068d6:	3001      	adds	r0, #1
 80068d8:	f000 80a4 	beq.w	8006a24 <_svfiprintf_r+0x1b8>
 80068dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068de:	4453      	add	r3, sl
 80068e0:	9309      	str	r3, [sp, #36]	; 0x24
 80068e2:	783b      	ldrb	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 809d 	beq.w	8006a24 <_svfiprintf_r+0x1b8>
 80068ea:	2300      	movs	r3, #0
 80068ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	9307      	str	r3, [sp, #28]
 80068f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068fc:	931a      	str	r3, [sp, #104]	; 0x68
 80068fe:	462f      	mov	r7, r5
 8006900:	2205      	movs	r2, #5
 8006902:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006906:	4850      	ldr	r0, [pc, #320]	; (8006a48 <_svfiprintf_r+0x1dc>)
 8006908:	f7f9 fc6a 	bl	80001e0 <memchr>
 800690c:	9b04      	ldr	r3, [sp, #16]
 800690e:	b9d0      	cbnz	r0, 8006946 <_svfiprintf_r+0xda>
 8006910:	06d9      	lsls	r1, r3, #27
 8006912:	bf44      	itt	mi
 8006914:	2220      	movmi	r2, #32
 8006916:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800691a:	071a      	lsls	r2, r3, #28
 800691c:	bf44      	itt	mi
 800691e:	222b      	movmi	r2, #43	; 0x2b
 8006920:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006924:	782a      	ldrb	r2, [r5, #0]
 8006926:	2a2a      	cmp	r2, #42	; 0x2a
 8006928:	d015      	beq.n	8006956 <_svfiprintf_r+0xea>
 800692a:	9a07      	ldr	r2, [sp, #28]
 800692c:	462f      	mov	r7, r5
 800692e:	2000      	movs	r0, #0
 8006930:	250a      	movs	r5, #10
 8006932:	4639      	mov	r1, r7
 8006934:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006938:	3b30      	subs	r3, #48	; 0x30
 800693a:	2b09      	cmp	r3, #9
 800693c:	d94d      	bls.n	80069da <_svfiprintf_r+0x16e>
 800693e:	b1b8      	cbz	r0, 8006970 <_svfiprintf_r+0x104>
 8006940:	e00f      	b.n	8006962 <_svfiprintf_r+0xf6>
 8006942:	462f      	mov	r7, r5
 8006944:	e7b8      	b.n	80068b8 <_svfiprintf_r+0x4c>
 8006946:	4a40      	ldr	r2, [pc, #256]	; (8006a48 <_svfiprintf_r+0x1dc>)
 8006948:	1a80      	subs	r0, r0, r2
 800694a:	fa0b f000 	lsl.w	r0, fp, r0
 800694e:	4318      	orrs	r0, r3
 8006950:	9004      	str	r0, [sp, #16]
 8006952:	463d      	mov	r5, r7
 8006954:	e7d3      	b.n	80068fe <_svfiprintf_r+0x92>
 8006956:	9a03      	ldr	r2, [sp, #12]
 8006958:	1d11      	adds	r1, r2, #4
 800695a:	6812      	ldr	r2, [r2, #0]
 800695c:	9103      	str	r1, [sp, #12]
 800695e:	2a00      	cmp	r2, #0
 8006960:	db01      	blt.n	8006966 <_svfiprintf_r+0xfa>
 8006962:	9207      	str	r2, [sp, #28]
 8006964:	e004      	b.n	8006970 <_svfiprintf_r+0x104>
 8006966:	4252      	negs	r2, r2
 8006968:	f043 0302 	orr.w	r3, r3, #2
 800696c:	9207      	str	r2, [sp, #28]
 800696e:	9304      	str	r3, [sp, #16]
 8006970:	783b      	ldrb	r3, [r7, #0]
 8006972:	2b2e      	cmp	r3, #46	; 0x2e
 8006974:	d10c      	bne.n	8006990 <_svfiprintf_r+0x124>
 8006976:	787b      	ldrb	r3, [r7, #1]
 8006978:	2b2a      	cmp	r3, #42	; 0x2a
 800697a:	d133      	bne.n	80069e4 <_svfiprintf_r+0x178>
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	1d1a      	adds	r2, r3, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	9203      	str	r2, [sp, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	bfb8      	it	lt
 8006988:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800698c:	3702      	adds	r7, #2
 800698e:	9305      	str	r3, [sp, #20]
 8006990:	4d2e      	ldr	r5, [pc, #184]	; (8006a4c <_svfiprintf_r+0x1e0>)
 8006992:	7839      	ldrb	r1, [r7, #0]
 8006994:	2203      	movs	r2, #3
 8006996:	4628      	mov	r0, r5
 8006998:	f7f9 fc22 	bl	80001e0 <memchr>
 800699c:	b138      	cbz	r0, 80069ae <_svfiprintf_r+0x142>
 800699e:	2340      	movs	r3, #64	; 0x40
 80069a0:	1b40      	subs	r0, r0, r5
 80069a2:	fa03 f000 	lsl.w	r0, r3, r0
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	4303      	orrs	r3, r0
 80069aa:	3701      	adds	r7, #1
 80069ac:	9304      	str	r3, [sp, #16]
 80069ae:	7839      	ldrb	r1, [r7, #0]
 80069b0:	4827      	ldr	r0, [pc, #156]	; (8006a50 <_svfiprintf_r+0x1e4>)
 80069b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b6:	2206      	movs	r2, #6
 80069b8:	1c7e      	adds	r6, r7, #1
 80069ba:	f7f9 fc11 	bl	80001e0 <memchr>
 80069be:	2800      	cmp	r0, #0
 80069c0:	d038      	beq.n	8006a34 <_svfiprintf_r+0x1c8>
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <_svfiprintf_r+0x1e8>)
 80069c4:	bb13      	cbnz	r3, 8006a0c <_svfiprintf_r+0x1a0>
 80069c6:	9b03      	ldr	r3, [sp, #12]
 80069c8:	3307      	adds	r3, #7
 80069ca:	f023 0307 	bic.w	r3, r3, #7
 80069ce:	3308      	adds	r3, #8
 80069d0:	9303      	str	r3, [sp, #12]
 80069d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d4:	444b      	add	r3, r9
 80069d6:	9309      	str	r3, [sp, #36]	; 0x24
 80069d8:	e76d      	b.n	80068b6 <_svfiprintf_r+0x4a>
 80069da:	fb05 3202 	mla	r2, r5, r2, r3
 80069de:	2001      	movs	r0, #1
 80069e0:	460f      	mov	r7, r1
 80069e2:	e7a6      	b.n	8006932 <_svfiprintf_r+0xc6>
 80069e4:	2300      	movs	r3, #0
 80069e6:	3701      	adds	r7, #1
 80069e8:	9305      	str	r3, [sp, #20]
 80069ea:	4619      	mov	r1, r3
 80069ec:	250a      	movs	r5, #10
 80069ee:	4638      	mov	r0, r7
 80069f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069f4:	3a30      	subs	r2, #48	; 0x30
 80069f6:	2a09      	cmp	r2, #9
 80069f8:	d903      	bls.n	8006a02 <_svfiprintf_r+0x196>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0c8      	beq.n	8006990 <_svfiprintf_r+0x124>
 80069fe:	9105      	str	r1, [sp, #20]
 8006a00:	e7c6      	b.n	8006990 <_svfiprintf_r+0x124>
 8006a02:	fb05 2101 	mla	r1, r5, r1, r2
 8006a06:	2301      	movs	r3, #1
 8006a08:	4607      	mov	r7, r0
 8006a0a:	e7f0      	b.n	80069ee <_svfiprintf_r+0x182>
 8006a0c:	ab03      	add	r3, sp, #12
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	4622      	mov	r2, r4
 8006a12:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <_svfiprintf_r+0x1ec>)
 8006a14:	a904      	add	r1, sp, #16
 8006a16:	4640      	mov	r0, r8
 8006a18:	f3af 8000 	nop.w
 8006a1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006a20:	4681      	mov	r9, r0
 8006a22:	d1d6      	bne.n	80069d2 <_svfiprintf_r+0x166>
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	065b      	lsls	r3, r3, #25
 8006a28:	f53f af35 	bmi.w	8006896 <_svfiprintf_r+0x2a>
 8006a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a2e:	b01d      	add	sp, #116	; 0x74
 8006a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a34:	ab03      	add	r3, sp, #12
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	4622      	mov	r2, r4
 8006a3a:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <_svfiprintf_r+0x1ec>)
 8006a3c:	a904      	add	r1, sp, #16
 8006a3e:	4640      	mov	r0, r8
 8006a40:	f000 f882 	bl	8006b48 <_printf_i>
 8006a44:	e7ea      	b.n	8006a1c <_svfiprintf_r+0x1b0>
 8006a46:	bf00      	nop
 8006a48:	08006e88 	.word	0x08006e88
 8006a4c:	08006e8e 	.word	0x08006e8e
 8006a50:	08006e92 	.word	0x08006e92
 8006a54:	00000000 	.word	0x00000000
 8006a58:	080067b9 	.word	0x080067b9

08006a5c <_printf_common>:
 8006a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a60:	4691      	mov	r9, r2
 8006a62:	461f      	mov	r7, r3
 8006a64:	688a      	ldr	r2, [r1, #8]
 8006a66:	690b      	ldr	r3, [r1, #16]
 8006a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	bfb8      	it	lt
 8006a70:	4613      	movlt	r3, r2
 8006a72:	f8c9 3000 	str.w	r3, [r9]
 8006a76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	b112      	cbz	r2, 8006a86 <_printf_common+0x2a>
 8006a80:	3301      	adds	r3, #1
 8006a82:	f8c9 3000 	str.w	r3, [r9]
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	0699      	lsls	r1, r3, #26
 8006a8a:	bf42      	ittt	mi
 8006a8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a90:	3302      	addmi	r3, #2
 8006a92:	f8c9 3000 	strmi.w	r3, [r9]
 8006a96:	6825      	ldr	r5, [r4, #0]
 8006a98:	f015 0506 	ands.w	r5, r5, #6
 8006a9c:	d107      	bne.n	8006aae <_printf_common+0x52>
 8006a9e:	f104 0a19 	add.w	sl, r4, #25
 8006aa2:	68e3      	ldr	r3, [r4, #12]
 8006aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8006aa8:	1a9b      	subs	r3, r3, r2
 8006aaa:	42ab      	cmp	r3, r5
 8006aac:	dc28      	bgt.n	8006b00 <_printf_common+0xa4>
 8006aae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ab2:	6822      	ldr	r2, [r4, #0]
 8006ab4:	3300      	adds	r3, #0
 8006ab6:	bf18      	it	ne
 8006ab8:	2301      	movne	r3, #1
 8006aba:	0692      	lsls	r2, r2, #26
 8006abc:	d42d      	bmi.n	8006b1a <_printf_common+0xbe>
 8006abe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	47c0      	blx	r8
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d020      	beq.n	8006b0e <_printf_common+0xb2>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	68e5      	ldr	r5, [r4, #12]
 8006ad0:	f8d9 2000 	ldr.w	r2, [r9]
 8006ad4:	f003 0306 	and.w	r3, r3, #6
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	bf08      	it	eq
 8006adc:	1aad      	subeq	r5, r5, r2
 8006ade:	68a3      	ldr	r3, [r4, #8]
 8006ae0:	6922      	ldr	r2, [r4, #16]
 8006ae2:	bf0c      	ite	eq
 8006ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ae8:	2500      	movne	r5, #0
 8006aea:	4293      	cmp	r3, r2
 8006aec:	bfc4      	itt	gt
 8006aee:	1a9b      	subgt	r3, r3, r2
 8006af0:	18ed      	addgt	r5, r5, r3
 8006af2:	f04f 0900 	mov.w	r9, #0
 8006af6:	341a      	adds	r4, #26
 8006af8:	454d      	cmp	r5, r9
 8006afa:	d11a      	bne.n	8006b32 <_printf_common+0xd6>
 8006afc:	2000      	movs	r0, #0
 8006afe:	e008      	b.n	8006b12 <_printf_common+0xb6>
 8006b00:	2301      	movs	r3, #1
 8006b02:	4652      	mov	r2, sl
 8006b04:	4639      	mov	r1, r7
 8006b06:	4630      	mov	r0, r6
 8006b08:	47c0      	blx	r8
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d103      	bne.n	8006b16 <_printf_common+0xba>
 8006b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b16:	3501      	adds	r5, #1
 8006b18:	e7c3      	b.n	8006aa2 <_printf_common+0x46>
 8006b1a:	18e1      	adds	r1, r4, r3
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	2030      	movs	r0, #48	; 0x30
 8006b20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b24:	4422      	add	r2, r4
 8006b26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b2e:	3302      	adds	r3, #2
 8006b30:	e7c5      	b.n	8006abe <_printf_common+0x62>
 8006b32:	2301      	movs	r3, #1
 8006b34:	4622      	mov	r2, r4
 8006b36:	4639      	mov	r1, r7
 8006b38:	4630      	mov	r0, r6
 8006b3a:	47c0      	blx	r8
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d0e6      	beq.n	8006b0e <_printf_common+0xb2>
 8006b40:	f109 0901 	add.w	r9, r9, #1
 8006b44:	e7d8      	b.n	8006af8 <_printf_common+0x9c>
	...

08006b48 <_printf_i>:
 8006b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b50:	460c      	mov	r4, r1
 8006b52:	7e09      	ldrb	r1, [r1, #24]
 8006b54:	b085      	sub	sp, #20
 8006b56:	296e      	cmp	r1, #110	; 0x6e
 8006b58:	4617      	mov	r7, r2
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	4698      	mov	r8, r3
 8006b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b60:	f000 80b3 	beq.w	8006cca <_printf_i+0x182>
 8006b64:	d822      	bhi.n	8006bac <_printf_i+0x64>
 8006b66:	2963      	cmp	r1, #99	; 0x63
 8006b68:	d036      	beq.n	8006bd8 <_printf_i+0x90>
 8006b6a:	d80a      	bhi.n	8006b82 <_printf_i+0x3a>
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	f000 80b9 	beq.w	8006ce4 <_printf_i+0x19c>
 8006b72:	2958      	cmp	r1, #88	; 0x58
 8006b74:	f000 8083 	beq.w	8006c7e <_printf_i+0x136>
 8006b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b80:	e032      	b.n	8006be8 <_printf_i+0xa0>
 8006b82:	2964      	cmp	r1, #100	; 0x64
 8006b84:	d001      	beq.n	8006b8a <_printf_i+0x42>
 8006b86:	2969      	cmp	r1, #105	; 0x69
 8006b88:	d1f6      	bne.n	8006b78 <_printf_i+0x30>
 8006b8a:	6820      	ldr	r0, [r4, #0]
 8006b8c:	6813      	ldr	r3, [r2, #0]
 8006b8e:	0605      	lsls	r5, r0, #24
 8006b90:	f103 0104 	add.w	r1, r3, #4
 8006b94:	d52a      	bpl.n	8006bec <_printf_i+0xa4>
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6011      	str	r1, [r2, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	da03      	bge.n	8006ba6 <_printf_i+0x5e>
 8006b9e:	222d      	movs	r2, #45	; 0x2d
 8006ba0:	425b      	negs	r3, r3
 8006ba2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006ba6:	486f      	ldr	r0, [pc, #444]	; (8006d64 <_printf_i+0x21c>)
 8006ba8:	220a      	movs	r2, #10
 8006baa:	e039      	b.n	8006c20 <_printf_i+0xd8>
 8006bac:	2973      	cmp	r1, #115	; 0x73
 8006bae:	f000 809d 	beq.w	8006cec <_printf_i+0x1a4>
 8006bb2:	d808      	bhi.n	8006bc6 <_printf_i+0x7e>
 8006bb4:	296f      	cmp	r1, #111	; 0x6f
 8006bb6:	d020      	beq.n	8006bfa <_printf_i+0xb2>
 8006bb8:	2970      	cmp	r1, #112	; 0x70
 8006bba:	d1dd      	bne.n	8006b78 <_printf_i+0x30>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	f043 0320 	orr.w	r3, r3, #32
 8006bc2:	6023      	str	r3, [r4, #0]
 8006bc4:	e003      	b.n	8006bce <_printf_i+0x86>
 8006bc6:	2975      	cmp	r1, #117	; 0x75
 8006bc8:	d017      	beq.n	8006bfa <_printf_i+0xb2>
 8006bca:	2978      	cmp	r1, #120	; 0x78
 8006bcc:	d1d4      	bne.n	8006b78 <_printf_i+0x30>
 8006bce:	2378      	movs	r3, #120	; 0x78
 8006bd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bd4:	4864      	ldr	r0, [pc, #400]	; (8006d68 <_printf_i+0x220>)
 8006bd6:	e055      	b.n	8006c84 <_printf_i+0x13c>
 8006bd8:	6813      	ldr	r3, [r2, #0]
 8006bda:	1d19      	adds	r1, r3, #4
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6011      	str	r1, [r2, #0]
 8006be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006be8:	2301      	movs	r3, #1
 8006bea:	e08c      	b.n	8006d06 <_printf_i+0x1be>
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6011      	str	r1, [r2, #0]
 8006bf0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bf4:	bf18      	it	ne
 8006bf6:	b21b      	sxthne	r3, r3
 8006bf8:	e7cf      	b.n	8006b9a <_printf_i+0x52>
 8006bfa:	6813      	ldr	r3, [r2, #0]
 8006bfc:	6825      	ldr	r5, [r4, #0]
 8006bfe:	1d18      	adds	r0, r3, #4
 8006c00:	6010      	str	r0, [r2, #0]
 8006c02:	0628      	lsls	r0, r5, #24
 8006c04:	d501      	bpl.n	8006c0a <_printf_i+0xc2>
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	e002      	b.n	8006c10 <_printf_i+0xc8>
 8006c0a:	0668      	lsls	r0, r5, #25
 8006c0c:	d5fb      	bpl.n	8006c06 <_printf_i+0xbe>
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	4854      	ldr	r0, [pc, #336]	; (8006d64 <_printf_i+0x21c>)
 8006c12:	296f      	cmp	r1, #111	; 0x6f
 8006c14:	bf14      	ite	ne
 8006c16:	220a      	movne	r2, #10
 8006c18:	2208      	moveq	r2, #8
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c20:	6865      	ldr	r5, [r4, #4]
 8006c22:	60a5      	str	r5, [r4, #8]
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	f2c0 8095 	blt.w	8006d54 <_printf_i+0x20c>
 8006c2a:	6821      	ldr	r1, [r4, #0]
 8006c2c:	f021 0104 	bic.w	r1, r1, #4
 8006c30:	6021      	str	r1, [r4, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d13d      	bne.n	8006cb2 <_printf_i+0x16a>
 8006c36:	2d00      	cmp	r5, #0
 8006c38:	f040 808e 	bne.w	8006d58 <_printf_i+0x210>
 8006c3c:	4665      	mov	r5, ip
 8006c3e:	2a08      	cmp	r2, #8
 8006c40:	d10b      	bne.n	8006c5a <_printf_i+0x112>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	07db      	lsls	r3, r3, #31
 8006c46:	d508      	bpl.n	8006c5a <_printf_i+0x112>
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	6862      	ldr	r2, [r4, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	bfde      	ittt	le
 8006c50:	2330      	movle	r3, #48	; 0x30
 8006c52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c56:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006c5a:	ebac 0305 	sub.w	r3, ip, r5
 8006c5e:	6123      	str	r3, [r4, #16]
 8006c60:	f8cd 8000 	str.w	r8, [sp]
 8006c64:	463b      	mov	r3, r7
 8006c66:	aa03      	add	r2, sp, #12
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f7ff fef6 	bl	8006a5c <_printf_common>
 8006c70:	3001      	adds	r0, #1
 8006c72:	d14d      	bne.n	8006d10 <_printf_i+0x1c8>
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c78:	b005      	add	sp, #20
 8006c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c7e:	4839      	ldr	r0, [pc, #228]	; (8006d64 <_printf_i+0x21c>)
 8006c80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006c84:	6813      	ldr	r3, [r2, #0]
 8006c86:	6821      	ldr	r1, [r4, #0]
 8006c88:	1d1d      	adds	r5, r3, #4
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6015      	str	r5, [r2, #0]
 8006c8e:	060a      	lsls	r2, r1, #24
 8006c90:	d50b      	bpl.n	8006caa <_printf_i+0x162>
 8006c92:	07ca      	lsls	r2, r1, #31
 8006c94:	bf44      	itt	mi
 8006c96:	f041 0120 	orrmi.w	r1, r1, #32
 8006c9a:	6021      	strmi	r1, [r4, #0]
 8006c9c:	b91b      	cbnz	r3, 8006ca6 <_printf_i+0x15e>
 8006c9e:	6822      	ldr	r2, [r4, #0]
 8006ca0:	f022 0220 	bic.w	r2, r2, #32
 8006ca4:	6022      	str	r2, [r4, #0]
 8006ca6:	2210      	movs	r2, #16
 8006ca8:	e7b7      	b.n	8006c1a <_printf_i+0xd2>
 8006caa:	064d      	lsls	r5, r1, #25
 8006cac:	bf48      	it	mi
 8006cae:	b29b      	uxthmi	r3, r3
 8006cb0:	e7ef      	b.n	8006c92 <_printf_i+0x14a>
 8006cb2:	4665      	mov	r5, ip
 8006cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cb8:	fb02 3311 	mls	r3, r2, r1, r3
 8006cbc:	5cc3      	ldrb	r3, [r0, r3]
 8006cbe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	2900      	cmp	r1, #0
 8006cc6:	d1f5      	bne.n	8006cb4 <_printf_i+0x16c>
 8006cc8:	e7b9      	b.n	8006c3e <_printf_i+0xf6>
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	6825      	ldr	r5, [r4, #0]
 8006cce:	6961      	ldr	r1, [r4, #20]
 8006cd0:	1d18      	adds	r0, r3, #4
 8006cd2:	6010      	str	r0, [r2, #0]
 8006cd4:	0628      	lsls	r0, r5, #24
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	d501      	bpl.n	8006cde <_printf_i+0x196>
 8006cda:	6019      	str	r1, [r3, #0]
 8006cdc:	e002      	b.n	8006ce4 <_printf_i+0x19c>
 8006cde:	066a      	lsls	r2, r5, #25
 8006ce0:	d5fb      	bpl.n	8006cda <_printf_i+0x192>
 8006ce2:	8019      	strh	r1, [r3, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	6123      	str	r3, [r4, #16]
 8006ce8:	4665      	mov	r5, ip
 8006cea:	e7b9      	b.n	8006c60 <_printf_i+0x118>
 8006cec:	6813      	ldr	r3, [r2, #0]
 8006cee:	1d19      	adds	r1, r3, #4
 8006cf0:	6011      	str	r1, [r2, #0]
 8006cf2:	681d      	ldr	r5, [r3, #0]
 8006cf4:	6862      	ldr	r2, [r4, #4]
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f7f9 fa71 	bl	80001e0 <memchr>
 8006cfe:	b108      	cbz	r0, 8006d04 <_printf_i+0x1bc>
 8006d00:	1b40      	subs	r0, r0, r5
 8006d02:	6060      	str	r0, [r4, #4]
 8006d04:	6863      	ldr	r3, [r4, #4]
 8006d06:	6123      	str	r3, [r4, #16]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d0e:	e7a7      	b.n	8006c60 <_printf_i+0x118>
 8006d10:	6923      	ldr	r3, [r4, #16]
 8006d12:	462a      	mov	r2, r5
 8006d14:	4639      	mov	r1, r7
 8006d16:	4630      	mov	r0, r6
 8006d18:	47c0      	blx	r8
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	d0aa      	beq.n	8006c74 <_printf_i+0x12c>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	079b      	lsls	r3, r3, #30
 8006d22:	d413      	bmi.n	8006d4c <_printf_i+0x204>
 8006d24:	68e0      	ldr	r0, [r4, #12]
 8006d26:	9b03      	ldr	r3, [sp, #12]
 8006d28:	4298      	cmp	r0, r3
 8006d2a:	bfb8      	it	lt
 8006d2c:	4618      	movlt	r0, r3
 8006d2e:	e7a3      	b.n	8006c78 <_printf_i+0x130>
 8006d30:	2301      	movs	r3, #1
 8006d32:	464a      	mov	r2, r9
 8006d34:	4639      	mov	r1, r7
 8006d36:	4630      	mov	r0, r6
 8006d38:	47c0      	blx	r8
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d09a      	beq.n	8006c74 <_printf_i+0x12c>
 8006d3e:	3501      	adds	r5, #1
 8006d40:	68e3      	ldr	r3, [r4, #12]
 8006d42:	9a03      	ldr	r2, [sp, #12]
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	42ab      	cmp	r3, r5
 8006d48:	dcf2      	bgt.n	8006d30 <_printf_i+0x1e8>
 8006d4a:	e7eb      	b.n	8006d24 <_printf_i+0x1dc>
 8006d4c:	2500      	movs	r5, #0
 8006d4e:	f104 0919 	add.w	r9, r4, #25
 8006d52:	e7f5      	b.n	8006d40 <_printf_i+0x1f8>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1ac      	bne.n	8006cb2 <_printf_i+0x16a>
 8006d58:	7803      	ldrb	r3, [r0, #0]
 8006d5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d62:	e76c      	b.n	8006c3e <_printf_i+0xf6>
 8006d64:	08006e99 	.word	0x08006e99
 8006d68:	08006eaa 	.word	0x08006eaa

08006d6c <memcpy>:
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	1e43      	subs	r3, r0, #1
 8006d70:	440a      	add	r2, r1
 8006d72:	4291      	cmp	r1, r2
 8006d74:	d100      	bne.n	8006d78 <memcpy+0xc>
 8006d76:	bd10      	pop	{r4, pc}
 8006d78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d80:	e7f7      	b.n	8006d72 <memcpy+0x6>

08006d82 <memmove>:
 8006d82:	4288      	cmp	r0, r1
 8006d84:	b510      	push	{r4, lr}
 8006d86:	eb01 0302 	add.w	r3, r1, r2
 8006d8a:	d807      	bhi.n	8006d9c <memmove+0x1a>
 8006d8c:	1e42      	subs	r2, r0, #1
 8006d8e:	4299      	cmp	r1, r3
 8006d90:	d00a      	beq.n	8006da8 <memmove+0x26>
 8006d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d96:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006d9a:	e7f8      	b.n	8006d8e <memmove+0xc>
 8006d9c:	4283      	cmp	r3, r0
 8006d9e:	d9f5      	bls.n	8006d8c <memmove+0xa>
 8006da0:	1881      	adds	r1, r0, r2
 8006da2:	1ad2      	subs	r2, r2, r3
 8006da4:	42d3      	cmn	r3, r2
 8006da6:	d100      	bne.n	8006daa <memmove+0x28>
 8006da8:	bd10      	pop	{r4, pc}
 8006daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006db2:	e7f7      	b.n	8006da4 <memmove+0x22>

08006db4 <_realloc_r>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	4607      	mov	r7, r0
 8006db8:	4614      	mov	r4, r2
 8006dba:	460e      	mov	r6, r1
 8006dbc:	b921      	cbnz	r1, 8006dc8 <_realloc_r+0x14>
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006dc4:	f7ff bc6c 	b.w	80066a0 <_malloc_r>
 8006dc8:	b922      	cbnz	r2, 8006dd4 <_realloc_r+0x20>
 8006dca:	f7ff fc1b 	bl	8006604 <_free_r>
 8006dce:	4625      	mov	r5, r4
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd4:	f000 f814 	bl	8006e00 <_malloc_usable_size_r>
 8006dd8:	42a0      	cmp	r0, r4
 8006dda:	d20f      	bcs.n	8006dfc <_realloc_r+0x48>
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4638      	mov	r0, r7
 8006de0:	f7ff fc5e 	bl	80066a0 <_malloc_r>
 8006de4:	4605      	mov	r5, r0
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d0f2      	beq.n	8006dd0 <_realloc_r+0x1c>
 8006dea:	4631      	mov	r1, r6
 8006dec:	4622      	mov	r2, r4
 8006dee:	f7ff ffbd 	bl	8006d6c <memcpy>
 8006df2:	4631      	mov	r1, r6
 8006df4:	4638      	mov	r0, r7
 8006df6:	f7ff fc05 	bl	8006604 <_free_r>
 8006dfa:	e7e9      	b.n	8006dd0 <_realloc_r+0x1c>
 8006dfc:	4635      	mov	r5, r6
 8006dfe:	e7e7      	b.n	8006dd0 <_realloc_r+0x1c>

08006e00 <_malloc_usable_size_r>:
 8006e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e04:	1f18      	subs	r0, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bfbc      	itt	lt
 8006e0a:	580b      	ldrlt	r3, [r1, r0]
 8006e0c:	18c0      	addlt	r0, r0, r3
 8006e0e:	4770      	bx	lr

08006e10 <_init>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	bf00      	nop
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr

08006e1c <_fini>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	bf00      	nop
 8006e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e22:	bc08      	pop	{r3}
 8006e24:	469e      	mov	lr, r3
 8006e26:	4770      	bx	lr
